{"_id":"xdg-portable","_rev":"28-2a04e2011bb9481f2a91fe7e16457086","name":"xdg-portable","dist-tags":{"latest":"10.6.0"},"versions":{"5.0.0":{"name":"xdg-portable","version":"5.0.0","description":"Get XDG Base Directory paths","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=8"},"scripts":{"test":"xo && ava && tsd"},"keywords":["xdg","base","directory","basedir","path","data","config","cache","linux","unix","windows","spec"],"devDependencies":{"ava":"^1.4.1","import-fresh":"^3.0.0","tsd":"^0.7.2","xo":"^0.24.0"},"gitHead":"cd820ceb3faf1207bdb8a0c1fda15485a81c0958","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@5.0.0","_nodeVersion":"10.15.3","_npmVersion":"6.9.0","dist":{"integrity":"sha512-Q+IpHqNpFQ/V+80pPln7ol7j8L4Yi+frLb9ww1UvRSZCrM5A6X6ilQM0oYaiI7QPO7kZQ9BJkk8EGxZOX6b5Yw==","shasum":"a82d18405f865f064180d9a5fd21a5d40bdacc41","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-5.0.0.tgz","fileCount":5,"unpackedSize":5559,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdDrT5CRA9TVsSAnZWagAAuAQQAI0TpH+1/J9/gMSQSiyL\nCr4trEK5xR4jRvyazyCGUdKrfFINJKOjFKRdzxCR6BCgiwQ9/V3i3ff0UCYp\nxCu1XdpopIMYUU592GM5B7JdUOjQZprbQT67vwnB4u37nTuJPFJND7TxSL2Y\n1tm7YXMen5VtFSI0S1+8Uuyz1pGStd40ef3/7IwMYtcoYmacBs/OM6YeK7Sl\na1k33FIn601+KPS64HV4eK01gxQzJTqjXV5hfFdz0K8NV9ZYKX0743mcvIBy\noamYxUlIZIxreYKWWoHi9S4K9688lcDJ0e0H+7DC7sFuV1+ffjUg1rQWx4xh\nViBV8iN6JXbYCNKrY4ylzdwR9Km0XEbnoLftdkTMLlPRWS0IaSr3wEmkq9N+\nj9W62yANrm9s8eRhO/YQhao2rgaMbxPgcnJQoDH5uBl/F0FJdRJ0weHw51VT\n9MyE+6vbyyiMqL0I71qYJCZ1haosT9b48AbO9MeFhYG+vwAKEr/GU2cVpOa1\n7JMllIqsbnhzEgLhqawkatRsIfGqmMyIbEBOPD5zFmd0p4pO7Kb/9rm71Uwh\nnrcZvoqG/kEel7J48+xXCIKKEOOJ1fnhSSpsFTgXbqrAwcGMEi2mK4bupCCq\n9GQeSZNqfdu925BLGaUNvKZjh19tZWx34POuBYmqsPuNjLZQlb28ToF4m6KF\nYHjP\r\n=Yk8C\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFzchl/X4VhtuTGpfAa1T/xUer5Wyuy4aOr6z5WQzsZ7AiBw5uXCfcVyH4nSDXK4x2hlGRDnt5yVJxz24By81iSjxA=="}]},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_5.0.0_1561244920410_0.45367533291195006"},"_hasShrinkwrap":false},"6.0.0":{"name":"xdg-portable","version":"6.0.0","description":"Generate portable XDG Base Directory paths","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=8"},"scripts":{"test":"xo && ava && tsd"},"keywords":["xdg","base","directory","basedir","path","data","config","cache","linux","unix","windows","spec"],"devDependencies":{"ava":"^1.4.1","eslint":"^6.0.1","import-fresh":"^3.0.0","tsd":"^0.7.2","xo":"^0.24.0"},"gitHead":"f91b36991658ae53f35cca4858f354bcbf9e4fc7","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@6.0.0","_nodeVersion":"10.15.3","_npmVersion":"6.9.2","dist":{"integrity":"sha512-aTf8SRyBFq+ykpInzCayioLCPfkQU+7GOdaYVF6EYV/jxbBFwytFmgK9Lh19LkpmFZkrlVs2pYB8OzJuJ4n60g==","shasum":"2e07dd3587e86a8bb235d0caaa0f24f5e6b7642a","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-6.0.0.tgz","fileCount":5,"unpackedSize":10692,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdGDW7CRA9TVsSAnZWagAATrUP/AtgY5W+1ModVW9enqIW\nLaTy7da8WtcPoDuVfkP9umyA4ZBRwnT6Md6/Ga2VBAdE5ZcEr9asG4bnXHKM\nl9huyeQECQUSGN0U6vHaUkcoAIrVOKC8NikVtQAyPEoBo++RtHkKnSb1fPMq\nfnQqC3ATP/QCnDFyLQ5GSSwut5C2mEp7CpsXPXBP+twd/5PqGQWvjc1Syo8H\nfUjf482ueE2184z24dT3UgzCVBymtW8/XJVMykeZx6g8+Uj8QiqrUITw7brD\n/+Mrd2xbBqxtZguitn9a8/ag0K6wUd8AFq7z7I4bNLmVk2vgrC9pcRHbXgBy\nt/yyZO0VwhRsxhGqW44zdP1tfLJAJiKizmYJ9FHb5o+HqQbp/CnyiJoC+d96\n0lFWrRWu0d9URpm08xO3agF8XJ9ZTwnjDJiR9z/ex81Jt5XZQorZFnRz3BFY\n/AQW5Dv2Mxq2wgkQ93WlDCiUhccE2zWqiC/k6TSBsjfmjK7W6x9uqN2VvoIf\nxaoCiX2TZVVwUcIEuOBe3AOvvggLfrhulOMwslxyWASJGLOVBSkviWkmP7gF\n6kbZx9apjrMlriWMvypClcu7Vj+6jsDgrO354lV8kE4KnZC7LodF5ZYl1FP4\nxUeYPXKn5Q/mLJ6e6ZvM3jJo/UmHAC6x9ksczz3f4nwJebUb3PNUzQx1PkLJ\nAfbx\r\n=YPD6\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCb3oUtAO5NFY4O3sVcWhh9xyshQiDf/qZSZO0YQKM9NQIgbXgqmkq+/uxD/VQXEbZHRfbueww7hqJevAP2BfSSrkQ="}]},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_6.0.0_1561867706698_0.298853884372277"},"_hasShrinkwrap":false},"6.0.1":{"name":"xdg-portable","version":"6.0.1","description":"Generate portable XDG Base Directory paths","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=8"},"scripts":{"test":"xo && ava && tsd"},"keywords":["xdg","base","directory","basedir","path","data","config","cache","linux","unix","windows","spec"],"devDependencies":{"ava":"^1.4.1","eslint":"^6.0.1","import-fresh":"^3.0.0","tsd":"^0.7.2","xo":"^0.24.0"},"gitHead":"c1ee2ea2e8c8309ae929893e60dc6da4b8fcfbaf","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@6.0.1","_nodeVersion":"10.15.3","_npmVersion":"6.9.2","dist":{"integrity":"sha512-cEKjZA/9Ol+9fG9Rk+p6/9P+oO4TzX/FAuq3nr9KuNvIbOjJ5/gAm3xP/hemZE35yaUoUS82QWZvvVgDnW/kUQ==","shasum":"4dd6371a39bb4fe598d0d9728b35fa73d1ef682c","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-6.0.1.tgz","fileCount":5,"unpackedSize":10693,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdGDl2CRA9TVsSAnZWagAAw5oP/jJDsMd+Q01FR5FH/wkK\nVbZXIu0Yx5bK8cstdDnZoXYWGc33r3UgyVOMCSIB864F7eNL9Ow09OI62eC+\nnUTbDhvxbWgTMyfbGKutVNA7gTiWtCNQkNu+YAQvZfXpu4wI2wwNnn96KD4j\nsR13SGjuxPJl7bTJ4GGuBDCnoUXsTmonGTOw8+mUrdLqfF+iSzIBkmGrlbYb\nJ4ZDQoTXQ/k6GUpKjkzTCky9wGcvZC8rL5Ht13rkjPOq03mXvjlkYnCkhNIw\nPeKgnO+hlHjVgLQRf2L4Nyh3NrNc6uLwmPTlmsgw+Xn93uRh77z4lhPJ1CPx\njsUELghNj/P+3k6FroCDMexMKELaO4rCpXOfZcF7AyaaINOm9yOTkHrZIOYB\nhcaWY9PDK9yqtysGtAiVv2H8gtUSWNI1b2FV64Ohb//3/uQ+tuMTDeF4aCIe\nRKrbnZIlz9Yx0JSv+16eraR7guye1mKocxYWKHg7IiX93aF20ioKi5p54MCC\n2TfO63XVTwIXuBadKmS/0ItUGVh1a2NZ6Nd/Vb2HwVhuIJ9mRYE7I8NeKjSO\nmPJHrbIFViTe5dpQhHeFrJfuDn4JIqrxbhVoGkUd5Ffb4kB0FUsQ1Xs6Zqzs\nfl8I/NVqBOLplWG6E75jOVr3hcPYiQYTPDztWQPHafcO7l7VJE+kBXnDH8OK\nqsGC\r\n=HWke\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDchJHBkv/8bZjzI1R/cizU7jSHn/y/rAWcD8cFRwP01gIgM3o9hki8ri/wrM2IoRYVWm/olPetk5E7Au2XoGeIIkc="}]},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_6.0.1_1561868661628_0.48630828762149303"},"_hasShrinkwrap":false},"7.0.0":{"name":"xdg-portable","version":"7.0.0","description":"Generate portable XDG Base Directory paths","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=8"},"scripts":{"cover":"npx nyc ava","test":"xo && ava && tsd"},"keywords":["xdg","base","directory","basedir","path","data","config","cache","linux","unix","windows","spec"],"dependencies":{},"devDependencies":{"ava":"^1.4.1","eslint":"^6.0.1","lodash":"^4.17.14","nyc":"^14.1.1","tsd":"^0.7.2","xo":"^0.24.0"},"optionalDependencies":{},"gitHead":"4f03c454c6a204660873e1c2cacbbe583484af9e","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@7.0.0","_nodeVersion":"10.15.2","_npmVersion":"6.10.1","dist":{"integrity":"sha512-cTPoJ+H60CfK1B0+84y10ii7z12dfeR7bGYPT7SPOgj6bxSvrkloK4tvjU3itQHVBQciNtJCkdsJX0dm67ZNXA==","shasum":"448be3948618342ef395b39ad231b99d5a805066","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-7.0.0.tgz","fileCount":5,"unpackedSize":17393,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdM+C2CRA9TVsSAnZWagAAF8EP/1bX6G73WlsQ/8oDmuc5\nh/AA3yNr5YdyeiH8bMRsaT8DLflqYU3wBiRQwkQOkoRaz3F1JXLEhSZpdMUw\nfTGn5TwCBGG4NE5OyazTOFs5VW5VFNjttW0g6ocfBmDJFLu9I6HdOC+EPIoY\n5ikv7zmB67wSXhy41QxFostjWY+j3Q6nxviyJKoMV1jUll64tV62bhZpkNio\nrpJHRmks1JaMhNoaMD6AF2oHj8dXKcEnNK9KfGAgPzjOWpXaj2h3BN0ISrj/\nzwj+/06iGUOOOwoVCAT5my10/wKyZl1ZWJJUzqyddEbveBR4Xk4k/XjKXaum\nd2gHgrFjEK9mHghLd3+qfy06Mu+dbuudOGkT5nUnOAqmXnM5Lcd0HMtEOz/X\nO8j7ShT6F9ewI90/1LALSayub/aKXhGXTV9yWVZSDw3fNwRMx2ULgSvjIvqp\nlvOS9qFRCF2x6RJWqu54osUyzDot/PGNLWbaAJRUgG/5DWQHTnTvScXvnJjD\nILPhZ/TntRFwgvLJyfZ01zwTHuAM3thfgVNLM6wUETY+wFnFVwnBNy/WbzQn\n70hv3Hkd4L4plUXuAH01J2uJxqN75t8d9sxtACrEXu+3z74fiSwwgzzn5/oV\n+mPWozDI/x7CDk2RDeTMuhV3NAw87h8MGCzEP6mWADxp8J/UT9xmCBZLu5BF\nsg/0\r\n=m9r7\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCvB/XM/icM0vzWJ282Y328Owo3qDl+iwjqcC2uAkUOeQIhAIHKm4Pwiss/1d6OgMdK+Rmx2cqKKGF7TCIBY5bIxXX4"}]},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_7.0.0_1563680949510_0.5585631175327954"},"_hasShrinkwrap":false},"7.0.1":{"name":"xdg-portable","version":"7.0.1","description":"Generate portable XDG Base Directory paths","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=8"},"scripts":{"coverage":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","test":"xo && nyc --silent ava && tsd"},"keywords":["xdg","base","directory","basedir","path","data","config","cache","linux","unix","windows","spec"],"dependencies":{},"devDependencies":{"ava":"^1.4.1","codecov":"^3.5.0","eslint":"^6.0.1","lodash":"^4.17.14","nyc":"^14.1.1","tsd":"^0.7.2","xo":"^0.24.0"},"optionalDependencies":{},"gitHead":"a80dc4ceab25fd4e2153994f25d9c359d49625e5","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@7.0.1","_nodeVersion":"10.15.3","_npmVersion":"6.10.1","dist":{"integrity":"sha512-Kcp6Jx3Y2ECb8Ub6JrfE3XUqk6StlDefj/bcS70bw1k9/LldTXT4BoY2NlLRKo50NrN1ytXQlhsKiS7s8vx0oA==","shasum":"39ce0caa5eff615a557f296e14cb124c748bb121","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-7.0.1.tgz","fileCount":5,"unpackedSize":18997,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdPMrYCRA9TVsSAnZWagAAw48QAI0SnKBl/5CVbSw46Imv\nV3RHgkaqsk/5c0k++VtW/EilomxwHDTm0/ZorREdCkJAiRlXVUP+WsKdWJxy\ndDQI7N3N9XAyaSS0xIB4WwSIcDWxKf14lZZdsFak+dc527TJGGfhNEpe8Mrl\nJNHP4Dp77oH+NiPMOcd4eo3Ll4Gi85a6MDO7LuA/FA+0oAXCbEsn1Ib7jcjS\nbnTjyMh63xbgXy/BMitSuSrBONbITWXDGfGPu9vQ6nUkF3nfkkIeXA4pzpMQ\n7VEg2f9IRxIzuuH28AbXHJq4RDYJXCcnEZ7quvK/ckS4Y8DeCXBSHz15RGcm\nhxIcd9IZrwNXsan+gh5+K8ADUkPhmwlEE0VrGfmKio7oRw3YI8uXLzqsYoqG\neDzQxu9JBx0oa2BbYrgrzgsW8EPZVnKvwdZXt+Yb4vSn2FwrQWE/rE7sRgzY\n21yHAovIwUtl2Y5P/xWRrNHN6U8G63VrL+t52uPkr8X7eo2rq81zEUVjj3I7\nOe6QaXBDmU6ZqkEefgreX9NsndUAtamF/Zjod+bwykzql8ICYVTvRdv29LRM\nHpQVdYhpdFjbLwpV2uTqk61zufTTdnpAzcqFE54Kyuel3yJ0z3GgX43XkL81\ne3extS2SazfNViF8ICUBlPxnVNeqEbtJ9LpatRrNHGy6/ROPMcNvORTo2C3r\n4Q/s\r\n=5hXT\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGXvtXG21bcxfl0i2ja8w3HhxTttuM02EQIdi+o5yWSiAiEAnlk6GJbNvZEgAlfydLZwOWCY1TdGB0MdPVZxtQCmvMI="}]},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_7.0.1_1564265175146_0.7513883129893182"},"_hasShrinkwrap":false},"7.0.2":{"name":"xdg-portable","version":"7.0.2","description":"Generate portable XDG Base Directory paths","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=8"},"scripts":{"coverage":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","test":"xo && nyc --silent ava && tsd"},"keywords":["xdg","base","directory","basedir","path","data","config","cache","linux","unix","windows","spec"],"dependencies":{},"devDependencies":{"ava":"^1.4.1","codecov":"^3.5.0","eslint":"^6.0.1","lodash":"^4.17.14","nyc":"^14.1.1","tsd":"^0.7.2","xo":"^0.24.0"},"optionalDependencies":{},"gitHead":"980f2671bec0538c7a665d67c6983dffb657289d","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@7.0.2","_nodeVersion":"10.15.3","_npmVersion":"6.10.1","dist":{"integrity":"sha512-xMcLz1CasPG62mqt0OnBC4/wiH8N61Hvv+9rIAoh1saNPa8kzxXQWj0nbC/jVP+CfX61ySBvTEfa4HRr82U3XQ==","shasum":"8862f94da7ffebc903f0723a9c45503966aa3bdb","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-7.0.2.tgz","fileCount":5,"unpackedSize":18859,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdPhtTCRA9TVsSAnZWagAAAzAP/0nUPD7vySVsYIOpnJEd\n8l6irfQljpDtnKM0FEEHaISrMgcDUxCOhLXbXMMRRBMUkJgRvXJEN+gaYpMc\nLYxnZpUalFqorYq5Pu6gU5tJ3LX2qTBGzHG8Ivo2UsZYWCc7qwL2ukzc0gfv\nPB3U1WO3dec3vnES8qFy4wLs1uZn7QTGSvCqkHeqkt1osmRtJ/d6r9pQ8BGf\n4Oxu3jncfr6oG3b161DVVW9pY1xAlDcTcfztPKOi3GkiqNbAOs2x46hYaL8R\n7xTf2twoWbqsrDZYtYmAGV/7qOwTUNY32t8pHSu80n8Ld2V3nPahccKZRN2k\nJnPkwtAIpRIDUT7xjn6E7gMpqjzLPvpzHjYrGnF8IxfPAZQ+JY3cyoLuH+ns\nvd2afoyda/Lp0gt8C3SdtmtTnutfXaDb+B3Y1wuK+YtieKvowJpGqPmQxN0n\npzH4266h5Q7u45s8GugSON1jUaravP1z0kYhVXfAUe6iz0avz9+wGibWzKIw\nB9sKSJessHAB43zMiQ/PLgp+UT1jk679s0aY/dUsorDQU4UOWfISzhwaAtJL\nGGsD+P2yM1Ex5TBUF23xlzVzLT1Nj5FKudPjgZ97uxUqMAR0klr9B0z62El7\n+EkSpiaq4998RvHNdFw4UufYawpqW/fFYpbCVg6ByF5vQ1ifvlVRqCkUGigT\n0YT0\r\n=tfh3\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC7KpQa4pFp+i9zt7QwkV/gN0r8tG2xLIe0fHhLRZ6EvQIhAJsk3M84fTVj/v7Ra6Pqo7eg8u/SDo/15zvb2P8469sU"}]},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_7.0.2_1564351314459_0.14019682329672656"},"_hasShrinkwrap":false},"7.0.3":{"name":"xdg-portable","version":"7.0.3","description":"Generate portable XDG Base Directory paths","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=8"},"scripts":{"coverage":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","test":"xo && nyc --silent ava && tsd"},"keywords":["xdg","base","directory","basedir","path","data","config","cache","linux","unix","windows","spec"],"dependencies":{},"devDependencies":{"ava":"^1.4.1","codecov":"^3.5.0","eslint":"^6.0.1","lodash":"^4.17.14","nyc":"^14.1.1","tsd":"^0.7.2","xo":"^0.24.0"},"optionalDependencies":{},"gitHead":"963fcd4067b04a964428866153018232909880d1","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@7.0.3","_nodeVersion":"10.15.3","_npmVersion":"6.10.1","dist":{"integrity":"sha512-52a8pF3pbBsXV7gcAd9RKNWN/A25dgxL695+HMvgX3xZ/g+d5ZzMgqP25OVkxrBqvzI2XsL6mpoSyPPjjHELNw==","shasum":"f3c6a5babcb123fc9bc93a5696a8228be9a0ace3","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-7.0.3.tgz","fileCount":5,"unpackedSize":18848,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdPiCECRA9TVsSAnZWagAAIrkQAJuuNic1rOTusuOSx2M+\n+bQAOlq+AZBjAM7vfBRRF61fJNeqk0gS/oZxpA/dODVqSgATGNLIAm4G4RIq\n+1zSjpkwJs2Sa34Lko8MAS4gNIZfRzHLrDnglcVWR/WHHLS4vqHg6e1WOERu\nX8o8UQp5OGsckdOENP93V0r7xrzvKIgmJQerQ9pVpyaHpr0ZlYJyqqkOo20L\nRbC4yvnhXeKAvqoCKq0SZEhxWHcorqhLnHrTYvvE2UQJZLFpaHtMpPCEDAff\n5PFAHR/H7MHbgHZM97Nc0MrVy98OPuWIzLZKFOs5rSUfnWry9jyV/sCwUoAb\nWP4v/O58IBTWFPXyaYndH1aezQdQeudnEhfmtR8ALf3gHAJlOrtm67c3bkR6\n+mToviZhaxdbdYhxfzUTaXB5JwoR/vObaPc0qCjKXIVH/ZwIq5rMuj4H2zvb\n/eJ0XhHB4F9nsL2G5F1jchFu7BKqNTPq0Pn5k4rlK6ugaeSuXsf1oXct0W5x\nY1Tj67gCnKCPf7bMLfMp3Itbt7i97cRJ/VEokjfnWOTSDL4inPj8LHs8A2VZ\nS3JRtRSylmzkkHjmjHTG+Vsn4Vj6szpZ8/F0Xb6RlQ/8PrvDu6c6b9CLKDf7\nzNrPpmzE53Ls4LQGkT3jvHeE1HEn4I03YlaiSEA7mOSCIMXU8lwHe8aWmTtP\nYxp1\r\n=9M+l\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCHat8G2Nmt8CAM1aAL563IAH2W9NDCrDQLnKwdufYy1wIhAKU4ILvTHlPl+l3CRgRZmfMDdMTcG3Dm7oXE2JyYODtE"}]},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_7.0.3_1564352644051_0.9825334029608797"},"_hasShrinkwrap":false},"7.1.0":{"name":"xdg-portable","version":"7.1.0","description":"Generate portable XDG Base Directory paths","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=8"},"scripts":{"coverage":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","test":"xo && nyc --silent ava && tsd"},"keywords":["xdg","base","directory","basedir","path","data","config","cache","linux","unix","windows","spec"],"dependencies":{},"devDependencies":{"ava":"^1.4.1","codecov":"^3.5.0","eslint":"^6.0.1","lodash":"^4.17.14","nyc":"^14.1.1","tsd":"^0.7.2","xo":"^0.24.0"},"optionalDependencies":{},"gitHead":"a73208e06e9194ff5fbdda42028fe122fb72c884","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@7.1.0","_nodeVersion":"10.15.3","_npmVersion":"6.10.2","dist":{"integrity":"sha512-QBi9hgiacopF0dMgBKO9Josh52YiBw6Chf0AqqMfc96go6EJqNBImFTws7NHIsWX2rWBlEzHC1I+pABYcYM9RQ==","shasum":"0b44ed91808262bdb1eac2155692b8e52e453cca","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-7.1.0.tgz","fileCount":5,"unpackedSize":19012,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdWbPCCRA9TVsSAnZWagAAI28QAINctCetJkBNox3cJ0xn\n+zPYqojKj1IFKJDvD25g8wqdav4j5O6Rbj1OzaN72bnaAJova+F7JjEd4PJt\n0qMDB2cUSGNZK6NBabOFQz1aXioQOsGr3WLxZliAq9P1BNme92SF1uBaBBpK\n7gq0RCKlay5a+ipU++dpqVvbueCiJc8QxjbzjvSWE+aYEvX91ytusIJ/hPgy\nfw68o2l1vaLfpmQ/bqDBuLpdr6KOGc+xfqAKvhIs+vYBvK4tvaY537KYsSiS\n0CN5a1M3f3NhBgIjtLkki+FiDFLjwkOrNeEIMLWtN+/ly0ECo6U4biZAufrH\n2NnZvBxRSiGPrIZv/DEqCPqecutQiIV+nj8DsV8keeHTpfsnrGJ6IpO/F1zT\nu+ui/Ex2E2TWLhZBPkki6FwJziP1N1sa0w1+trZ2RMrt1mxAUNbxUuPY8pii\nMU4/CjfSWWj0Vym3zSfhN0Jy6KuhRrx9612FQre3W1A9VYE73lhxUccqnD0m\nEyRJIOq49AjCYWBOBoi18UaFtIfB2/U4mvK9xkYFgYWcTDX6CGi9+fM4Wzl7\nyh/F56t4eeSh3/j8V9K0LrGdhzwVuM1kSijq1TudHdVYw440OsUoZ3I99nvS\nbmEN6YpPic168ZCTob0MpI3Bo7+vSiJdlkTnb5VIIF+fAqyTdfUsmALCPWjk\nFesh\r\n=vR4s\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEM3Yg3toalalScnL3x1HC9HbfgNEeKnUvGMdvSSkUw3AiEA7JeSgYcrk8uJQFFb60s94oTPSSJp8XpAQ9G0ojd5sfM="}]},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_7.1.0_1566159809852_0.6388722102699143"},"_hasShrinkwrap":false},"7.2.0":{"name":"xdg-portable","version":"7.2.0","description":"Generate portable XDG Base Directory paths","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=6"},"scripts":{"coverage":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","lint":"run-p lint:*","lint:spell":"run-s -s _:min-node-8 _:spellcheck || run-s -s _:max-node-6 _:spellcheck-warn","lint:style":"xo","pretest":"npm run lint","test":"run-p test:*","test:code":"nyc --silent ava","test:types":"tsd","_:min-node-8":"is-node-modern 8","_:max-node-6":"is-node-not-modern 8","_:spellcheck":"cspell *.js *.ts readme.md --no-summary","_:spellcheck-warn":"echo-cli \"lint:spell WARN Spell-check skipped [for NodeJS < v8]\""},"keywords":["xdg","base","directory","basedir","path","data","config","cache","linux","unix","windows","spec"],"dependencies":{"os-paths":"^4.0.1"},"devDependencies":{"ava":"^1.4.1","codecov":"^3.5.0","cspell":"^3.2.14","echo-cli":"^1.0.8","eslint":"^5.16.0","is-node-modern":"^1.0.0","lodash":"^4.17.15","npm-run-all":"^4.1.5","nyc":"^14.1.1","tsd":"^0.7.1","util":"^0.12.1","xo":"^0.24.0"},"optionalDependencies":{},"gitHead":"87d2012fe1e67455834f666b65d76c82c1950def","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@7.2.0","_nodeVersion":"8.11.2","_npmVersion":"6.11.3","dist":{"integrity":"sha512-oIh3+eL53jlo4Mmw44SxPjiMs7XgJtsQ8DpeQgfYeXd3ePtuTIyr2sq7ox42ylrQN3Evth/bWqpflNlbl4AQYQ==","shasum":"3b86fc8d4bd0983c6653b8a034315a7e21840f97","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-7.2.0.tgz","fileCount":6,"unpackedSize":28055,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdl52iCRA9TVsSAnZWagAAWGsP+wVusx78gnyx7mNZK0LI\nytTF9o5WJ+Rny78EuAqVk6YvylQNVHZP4o7vHzBhjP8EpkIxMS8PT7Gxa36A\nmi3hNkc6qgY+HDwbinFahKR5L+6LLs4I03ASQdn6OkGBLp1Bx0lauyFrqswd\nx4I54BGlg2My1WpduUC3eOxJ+AtjUiPwdIO+ICapT3N5YCK46mWO2X99ZDgS\nRjAhbmPLQ9cztlIpzjIllRtBuOyAQYEeN/QLa1e5nOTkqLCT1QxD7ZmWVRZ0\nViN51IDAT/nBdJjfeZOlD9a1TMXUZQRqV+FvmefpyteYW1MsAgzlVqJqige3\nUQX5L8AqMjJp0vCreiQITIsYsmAafMezm8hOdeDxNSklMTGV9x2OIqi5ctRD\nMZyYSUYR7YVVergj2uuubdKFhFNwjuKf8YDNVKFFYpfHxciq1VSKwc8G/Xgb\nZc8TxOf03L0rxGL8ntl8uBEDG7fG+YAGFWHkUYOjs4Hh8WW0aT5JXiXtUJbV\nUwpauthI9HqxSo1HnAe5wl9Wn2cT4Ykil2SeXZmO2B27urhFZuG6PuePnhdp\nrjZlrM2IPX3Ov11iCJv8k64LMTiWt3hUC3Y0YVQ8FWXRCSxQ5TsmkAzwX8sd\nn/yO8JCR3eXBbfN89LZ4uEwGkDVfzhHw50pVNw3FYMMkBFnyhEPkmKbv8Kbe\niqhg\r\n=I+PK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIC7sQyHBpH8I8S87JqGgRRDyi5HogiRCJBoPWj8SVFo4AiEAvxfUC1RIYbK9VjZEHuiWa82DY193AKIs7froaw9TW90="}]},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_7.2.0_1570217377444_0.5371079744972866"},"_hasShrinkwrap":false},"7.2.1":{"name":"xdg-portable","version":"7.2.1","description":"Generate portable XDG Base Directory paths","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=6"},"scripts":{"coverage":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","lint":"run-p lint:*","lint:spell":"run-s -s _:min-node-8 _:spellcheck || run-s -s _:max-node-6 _:spellcheck-warn","lint:style":"xo","pretest":"npm run lint","test":"run-p test:*","test:code":"nyc --silent ava","test:types":"tsd","_:min-node-8":"is-node-modern 8","_:max-node-6":"is-node-not-modern 8","_:spellcheck":"cspell *.js *.ts readme.md --no-summary","_:spellcheck-warn":"echo-cli \"lint:spell WARN Spell-check skipped [for NodeJS < v8]\""},"keywords":["xdg","base","directory","basedir","path","data","config","cache","linux","unix","windows","spec"],"dependencies":{"os-paths":"^4.0.1"},"devDependencies":{"ava":"^1.4.1","codecov":"^3.5.0","coveralls":"^3.0.5","cspell":"^3.2.14","echo-cli":"^1.0.8","eslint":"^5.16.0","is-node-modern":"^1.0.0","lodash":"^4.17.15","npm-run-all":"^4.1.5","nyc":"^14.1.1","tsd":"^0.7.1","util":"^0.12.1","xo":"^0.24.0"},"optionalDependencies":{},"gitHead":"af7e04b25d3cc1598e60c43b620f32304d4fdb36","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@7.2.1","_nodeVersion":"8.11.2","_npmVersion":"6.11.3","dist":{"integrity":"sha512-cei7jiJbpiH+d5qqAcxVxTPNDolJQzwOZa64NYykO9XotK99q1x8NXaMJe4D08q7bigz003mKDSVTfH4lLiZKw==","shasum":"4301ba0868b2cbc9de0c53b3699906adcc9d2560","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-7.2.1.tgz","fileCount":6,"unpackedSize":28364,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdl6WUCRA9TVsSAnZWagAAHdsP/2A4K6OKSQfoibj6DAwX\n3pACMq8JUOvM3tGRYEzVHQuCWnhNKRyXjeys537hKpkHxkULaK64f1NIMYGv\nicFxjdYaYRUwnDdTHYJpeJRu6lvo7HpvhoWjgMQ7frgkdD/y0B69OcPA8QCG\n7GmTRHKCHj7y0d2YNX/zKDtKv7qt6CuTHczZwRFghRN6Z2zwxjAEsFLu1zGZ\nj1wxnSLGOQ04zxqKiJDStcSOwMFY4O5Cb3XxTpfCdIFI1k1VJXrA4MI3ZXb0\nLbS/P3D2t0sumUywazXPayYz4oUt26DorrEUY/HFsnowjyHNCZg9ixnvUGxw\n86TDckPT6LDL7jmREAGWSNVsq3c3CSRSc/w7tYlsf8shiORB+gm0n5XYcSrU\nw08XBMkKPF0vWn2n2ukMSLf05w12qa5Ie0Y9L5gk2BWOCXkt+jPfsB6yF7hj\niWo2bk4I6YUG0xL/etFM+jLmFfy6XWeJnVrYhqtJ0KfNPADnKCoi6PpFvtvx\nNHEg4rHr4Hr6r2lQSQtI++w1NQF7ltsDCTINSoIBbs7iONU/U8iaIJB9q9w1\neuAHTBMT44cyuYyFvu0pUF30tIihCsye2FRY25bfMGZdpnh24f8SHAYaV3zK\nOHOvpOR3rigHIzbqsTF5uYzZGb6IUYUCzpIeJ/5ovmlc5xoEVxybMvbQ1e7f\ndyTl\r\n=Qxti\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCkboJCjpRhf+s5Xn6kRnCeBPA4UR0XUzgbfokgqQDu+gIhAJaovDT5UTR6NWiT1cdzD7pUdDmhsGbwp+D9zPy9wo13"}]},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_7.2.1_1570219412245_0.6368127106855135"},"_hasShrinkwrap":false},"7.2.2":{"name":"xdg-portable","version":"7.2.2","description":"Generate portable XDG Base Directory paths","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=6"},"scripts":{"coverage":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","lint":"run-p lint:*","lint:spell":"run-s -s _:min-node-8 _:spellcheck || run-s -s _:max-node-6 _:spellcheck-warn","lint:style":"xo","pretest":"npm run lint","test":"run-p test:*","test:code":"nyc --silent ava","test:types":"tsd","_:min-node-8":"is-node-modern 8","_:max-node-6":"is-node-not-modern 8","_:spellcheck":"cspell *.js *.ts readme.md --no-summary","_:spellcheck-warn":"echo-cli \"lint:spell WARN Spell-check skipped [for NodeJS < v8]\""},"keywords":["base","basedir","cache","config","data","directory","linux","mac","macos","osx","path","spec","unix","windows","xdg"],"dependencies":{"os-paths":"^4.0.1"},"devDependencies":{"ava":"^1.4.1","codecov":"^3.5.0","coveralls":"^3.0.5","cspell":"^3.2.14","echo-cli":"^1.0.8","eslint":"^5.16.0","is-node-modern":"^1.0.0","lodash":"^4.17.15","npm-run-all":"^4.1.5","nyc":"^14.1.1","tsd":"^0.7.1","util":"^0.12.1","xo":"^0.24.0"},"optionalDependencies":{},"gitHead":"a217d63f9f51aa0809b9e410c4f777af3927d768","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@7.2.2","_nodeVersion":"12.19.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-pe48IIxemQ8kXMQblyd0WZl+pUXPUlixvxowPxDeITxumqjdacrAvb4K/lVPBUPLbLTlR+19zAc8rgRuVI0zuw==","shasum":"ad5b2e2c6f048cfae344a1fed87fca24c927da5b","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-7.2.2.tgz","fileCount":6,"unpackedSize":28661,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfpfDJCRA9TVsSAnZWagAAHRQP+gK+q/y+mVbN97ZM907K\ncBAJWkP5g8khDDh+UhSQJLyLlEI5a9mi9stXgc3KD4WDyn4aMewIS+Ydaz6G\nu2C4XDpyCrpbI6UKPFsRdHU8bKxx2XtGtEgphvz5VRfPsF7E/P3TsqdycQJj\n1aaG51eb5etGAz5IIbZO9WDuj4HQHuLxyCWM9S6YbCg1vh3rm75Uq+KBiy10\nw0c/cBsoRAsxuvICpt8GdHRQ9+ZuSEOC7iT0Bngs9drBA96cwK/D2ibyOevt\ncGpP5OdYaXkcpkYS6SICV8qfmf9YI7EB4LjSVRYeDsNwO+aO/jeWdbxKTM/e\nc493gW3eCzZeZT9qTiq+/57GFIAmTgg+zV/KO7TcKh4wcOls1GyrcE9WnSWK\nFxnPIy2Xb1/XyLBQUD2A1LNePKNrxUr2kQVCADn5VhtkwEE6pwohDk6s0BN2\nPgdkzBIaDrQQsPbldWFM+C3SCiqKFL2qxpbQlxhEzLlFHbQl6L1lbPC64RTK\nqUFaMuuAND0HzLdqls2x0uEnnV8opRNdvhVg+bQn7OweLNEh3y+Tl9EvC3vL\nHX1j2dngTo0BXxFAIMxTnQVKuDTmtBUqGyiRiK07PWYrHQYZ7cWsaQt13hxk\n4UmALZzgqJku051tMr+pu8zvc6BDHAV6YwWqzifhHfJz0RhN1CwVpPglWK+u\nTHro\r\n=kFvX\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCHmIHf+9JkveBnBrkbtPNCptRQFRV9n3xdfaSMJYfsYAIgUvNFlrM2Vzmz5PjTfivIeWguAKnihu/iEB7Ysy2Xyc0="}]},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_7.2.2_1604710600454_0.4299356644242158"},"_hasShrinkwrap":false},"7.3.0":{"name":"xdg-portable","version":"7.3.0","description":"Generate portable XDG Base Directory paths","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 6.0"},"main":"src/lib/index.js","types":"src/lib/index.d.ts","keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# coverage # calcuate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent _:max-node-8 && echo-cli \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s _:coverage","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix `ESLint` issues":"","fix:lint":"eslint . --fix","# fix:style # fix `Prettier` formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","# lint # check for package code 'lint'":"","lint":"run-s --silent _:max-node-8 && echo-cli \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p lint:*","# lint:lint # check for code 'lint' (using `ESLint`)":"","lint:lint":"eslint .","# lint:spell # check for spelling errors (using `cSpell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary","# lint:style # check for format imperfections (using `Prettier`)":"","lint:style":"prettier . --list-different","# lint:types # check for type declaration errors (using `tsd`)":"","lint:types":"tsd","# test # test package":"","test":"run-s lint && run-p test:*","# test:code # test package code":"","test:code":"nyc --silent ava","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && echo-cli \"[update] info CHANGELOG updated\"","_:coverage":"is-ci && run-s cov:send || run-s cov:view","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || (echo-cli \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1)","_:max-node-8":"is-node-not-modern 10","_:min-node-10":"is-node-modern 10","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || (echo-cli \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1)","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || (echo-cli \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1)","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || echo-cli \"[update] info CHANGELOG not updated\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || echo-cli \"[version] WARN CHANGELOG not updated\" 1>&2","prepublishOnly":"run-s update:* test _:vcs-strictly-clean-err","preversion":"run-s test","version":"run-s _:version:update:changelog lint:spell && git add CHANGELOG.mkd"},"dependencies":{"os-paths":"^4.0.1"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"ava":"^1.4.1","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^6.0.5","cspell":"^4.1.2","echo-cli":"^1.0.8","eslint":"^7.11.0","eslint-config-prettier":"^6.11.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-import":"^2.22.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^14.1.1","open-cli":"^6.0.1","prettier":"^2.1.1","tsd":"^0.13.1"},"optionalDependencies":{},"prettier # overrides/[*.markdown]/tabWidth":"// set to 4 when https://github.com/prettier/prettier/issues/5019 is fixed","prettier":{"printWidth":100,"singleQuote":true,"useTabs":true,"tabWidth":2,"overrides":[{"files":["*.md","*.mkd","*.markdown"],"options":{"tabWidth":2,"useTabs":false}}]},"tsd":{"directory":"test"},"gitHead":"ee52d71c877570fffe103d7d8b0c74b9450ddb00","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@7.3.0","_shasum":"c6b1610de806a2ca1fe65727d5f8402c295d2e96","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.17.1","_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"dist":{"shasum":"c6b1610de806a2ca1fe65727d5f8402c295d2e96","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-7.3.0.tgz","integrity":"sha512-sqMMuL1rc0FmMBOzCpd0yuy9trqF2yTTVe+E9ogwCSWQCdDEtQUwrZPT6AxqtsFGRNxycgncbP/xmOOSPw5ZUw==","fileCount":6,"unpackedSize":41626,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf2ZMkCRA9TVsSAnZWagAAUccP/3p0k2yVljvKJO2kEqmt\n5J3P4sthXOpKX4uXcRqm8H3VuwNpHE3al27bsN6RwoGIZUX7QiIMaHoDtGvj\nXVgtUrjsFT4JWlpzETEiRqM+oEqTuyJzROpMYxwj7zw6bxziauBNb2ZPNYlC\nXkR74L4ma4W41v+uPBqhfDqo2PZP1m1XWs+z8Qu9bEZYssa9cdj+kjmHkOpI\n4XC0jAlBEB5aHxwjkt/yw8LUWUqPSFw+rWOaI65QupAxzuNSrIZ6zTQ0J1Nh\nJ6yO/vbVvxbWn97jmWHZOs7FEbAF91e7vf6wSpuKCbGsV1yjrZYgLcuuiBfZ\nHlt7DVYNR8GqGeSJ97Z2ndbvGYD/jQ2I779W25h78G8YiPZ9tNle7QaIYEVb\nP6OyQtHFRTPjiTa+M7sYhlZrRqLEeGZ9fds1J+ICM8X1KH1iIPNZ1VBH3ep8\nvV2tAMEsTH8OKnrd0YxCGIMZRkt+oW+XJGqS0VcMyPL5rB/7GC/aU8kjOIKC\nizpdQ9JeJ67/sOcmO7Wz81a7TxU3BdTzfCvtPul7eVb9FDJaJuFNkKsesu7h\nvHyozCRo7ly9G1EVx14jDoY/8MKzyNo26tuU+EQ3n6lNkAv25xsTwdaj1C7/\nrJ3TXKsARjzR4sMPx5P2hjuNQ4f+pDk0nr57bjlH3EzK8qBR2uBJSbqpBECW\nlaU7\r\n=sbHU\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFvPfNucbR9AUuwF+FtoijVtjibrw4MfL1L7R08jMEhzAiEA0E9r15A6bFH6wnRq46VLbsuYA0RkILKINii8oczhzdg="}]},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_7.3.0_1608094500414_0.3451226386812667"},"_hasShrinkwrap":false},"8.0.0":{"name":"xdg-portable","version":"8.0.0","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-p --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:tests":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-tests.succeeded \"run-s -n rebuild:tests\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -disable-max-line-length -exclude \"(build|dist)/.*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:tests":"shx rm -fr build/tests_ && tsc -p tsconfig/tsconfig.tests.json && shx mkdir -p build/.targets && shx touch build/.targets/build-tests.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target dist/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.NPM_CONFIG_DRY_RUN; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch dist/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## lifecycle scripts ##":"","prepublishOnly":"npm run clean && npm run test --test-dist && run-s --silent update _:vcs-strictly-clean-err","preversion":"run-s --silent _:version:spell:changelog_update && npm run test --test-dist","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^6.2.0"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@rollup/plugin-replace":"^2.3.4","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typescript":"^4.1.3","unified":"^9.2.0"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/tests_/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"ee218dd9b3b4e66529ea99965443a6ea0b8e04c4","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@8.0.0","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-Lt7A1zUtHKZo0vYv1GEbYBR4RP6H7HXosauQY5Yh5UIIVougacXaYryPN/mjVEuHrElhW9BesSOk7C5vOWrQJg==","shasum":"92862dac16cb4cb67e7c7b158b31ab44727ca3d6","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-8.0.0.tgz","fileCount":11,"unpackedSize":78469,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgJuLTCRA9TVsSAnZWagAA6wcP/1QSNlZ91sTRlDGDADOz\ngtUqOnhEaF/GKATyBbgLyQ93CW29PVJ9uSkGQYvJHaoXDkyA3TKob5xr0T7T\nM1VF2R3XeRPKM0WELQE4nj7YbtQpmhLWGEBmqD5W78UMF44e/VaYddfjYTD3\nkCmBr4XNzedqLPT/BNmELYomdo6O3eHKnFuE3CReekqGQwjPCvG8iBPvjrdA\nAdjC5ocqjf3YHXv6NEnIYBM2j/H46eyupbq8syqaOXGnbX+Rarj8RaynLb7q\n2d9sRPst9K+DzvBGJ/ZJXVM+7N2qW8Lh+f+C6ktJ+bXZU1lX1TTMb4jM+1u8\nZhFyDOl40Xc0aPFSqMRAT06uZuLt67FyMlqe2xj+JootCsX+I2Fwp87xu7JE\ngFVZso5xo6Op7+J7EXQL09zzTCFUEQvuEXI57BCMXkjEWa0ygbRzHc/lgxPU\nkuA8vBEB5R3qv0mXg4uzm1+VhrmOXJdWMLM4suyXP0Ejkow9gb4OhqRoPpWY\nwHuQ4+KEWYn6Xd3kgRxd77+OljwYPxUR/nXpllTo8kzhGIv6ehuTWV2/4ah3\nQt71hEAIuclfqkNkKXKs8Che/D/nc94iGMjExhcUSxg5bFMCxyw360HtoUsg\noYOIz3pQdiizEf0AmP3bMF7yPDZQNiWywuafpSe0uu4obAOZ8zHzRM4PuGQV\nnCZp\r\n=9S5H\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCO5+wvRFOYSsQ+m6gLYZiH6a2IxUeQYNHtC1rU0ahlvwIgOGykapsEsc67k+PpqKBWDFgZk7KjwODBBGxnfWIXk5M="}]},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_8.0.0_1613161170978_0.06442155964137464"},"_hasShrinkwrap":false},"8.0.1":{"name":"xdg-portable","version":"8.0.1","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-p --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:tests":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-tests.succeeded \"run-s -n rebuild:tests\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -disable-max-line-length -exclude \"(build|dist)/.*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:tests":"shx rm -fr build/tests_ && tsc -p tsconfig/tsconfig.tests.json && shx mkdir -p build/.targets && shx touch build/.targets/build-tests.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target dist/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.NPM_CONFIG_DRY_RUN; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch dist/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## lifecycle scripts ##":"","prepublishOnly":"npm run clean && npm run test --test-dist && run-s --silent update _:vcs-strictly-clean-err","preversion":"run-s --silent _:version:spell:changelog_update && npm run test --test-dist","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^6.2.0"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@rollup/plugin-replace":"^2.3.4","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typescript":"^4.1.3","unified":"^9.2.0"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/tests_/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"4d74b9a8c497ed3a2b8d1543582fd6b7735f874d","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@8.0.1","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-/OA66mvMaZ0iE2EasngUDYEJT73O50Dlk1gDClhuoV5/CO4G7n8XCPz6DYZQ/V3msT+IGh3OzhElGAHfMj5B9A==","shasum":"5157fec8d71eb80f0f9d356ffd148588b37fe6eb","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-8.0.1.tgz","fileCount":12,"unpackedSize":78884,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgJujtCRA9TVsSAnZWagAAZogP/1xlg1wspsg5RunLhZFd\nhvDHv0rnNIGKh4MSm9izTP04txgEZSCuIBxDiPa4mJwvnK8goGs5BWCDJ4hT\nm7yZaqFfmw+fvQ1hPf2GkqkCd3UZs4oNrddHk4bnjqKZ/oGY0ODDkk5QRqDU\noQuFwyBV8YDFEPgq9+DhdWMMUAjVpdhn2LgLphZ2ufwczrij3x09+59xITpj\nEV11dEfI/PxkEz6VBiLIaFEfcvVXOuK7v1a1yAIsGGO6cZK122Rs+B50/Siz\nx2bFPm7WLrwID342yUuOWluHwUfUygyxlTrp/YovKeAx7whAdcPf+iEE+PX/\nu3ml/Bi+nTTYUJdxxTKBu2sBi6D2PeQPzAaQtXdZeVAMAg/fldkrTQHEFOnC\nJYLlh/+1gE+yKbyuu3Ly2H9Y69fL4stVZvP5eAD8ve4E90P3QPeUZbifMWeE\n7r0sMPH4bfgMCSAqdJW2avn76+LdqnC5aSUHuMylAd+m7vCDyHWh8MzUTkDI\nLnEk1Hm4sNJH8EWvDoDZAFdAMNepaY8OF/MwsoziaChYiIyyA9CCtYn+9ktc\nHgQ0w3qxJJI8NMIfQ748S+1C1ehZkMUOgZhlJBeLQMHXUmDquEZbCOTU0SDn\n8Xy2Ns00XG+ftLvmFqdfyrQYIrNKimnYzPmQdkhqNa7o9emmhMXGtSYxcdoX\nWi4w\r\n=dZRi\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHd23kGCdZRRxKB974LNazIJLWb+KAeolUre60Uiv2/BAiEApQ2rCoLCRbXhjQtaRA+EXK4DROmQyuC4lb6kPmQ1DoE="}]},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_8.0.1_1613162733125_0.6269940310790043"},"_hasShrinkwrap":false},"8.1.0":{"name":"xdg-portable","version":"8.1.0","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-p --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:tests":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-tests.succeeded \"run-s -n rebuild:tests\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -disable-max-line-length -exclude \"(build|dist|vendor)/.*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:tests":"shx rm -fr build/tests_ && tsc -p tsconfig/tsconfig.tests.json && shx mkdir -p build/.targets && shx touch build/.targets/build-tests.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target dist/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.NPM_CONFIG_DRY_RUN; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch dist/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"npm run clean && npm run test --test-dist && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && npm run test --test-dist","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^6.2.0"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@rollup/plugin-replace":"^2.3.4","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typescript":"^4.1.3","unified":"^9.2.0"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/tests_/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"ac07126a4000c5cda8f8ced33885958f002d4814","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@8.1.0","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-4RL4Bp61r58FpSCvHqOBeTFThy9pJwCul+bsEMy8cvIRSvbqUC2rJZr9tV2xHEK6uQUgVdtvLykkZU9OjrFV4g==","shasum":"9e71b787f310cea8d4d5c82a8291fdd85c9ec6ac","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-8.1.0.tgz","fileCount":14,"unpackedSize":83002,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgKTkXCRA9TVsSAnZWagAAZj0P/jf+gnov4zPt2IsZXIn7\nk5KLkIpZH5y/jiYRYoTNyXJlSxBus0NzVjjBEoXmAjPlvbFlNfgWscz/K7rG\nXbtpVoJP0mrcdvIHgdf9EFkHofzJvK5j5dGeF62juf7JTqJC7RKJTF1fcUiA\nevMRt0+nlDQc0XVicOg6TXSZS21JLxeD8/qoD/VAnFt4uwCfgW4+0mPeLIt3\n5mvQkDsWsWHXnGVFupqjXMX4GDo493aIH3AtnE5YwQd2zS6Tm7Gf3GaE3OQV\nB+YeoJCDC4alUXhSx3+P1ds4MlozktxGkjuxqNtW3ps/LXGH2s0ArXGfS4p8\nSgi1KJXZZcr8hQyC0X+aQXr7f77aODJfRnFbeqNvDwk20R8egRfLPX7Pr260\nUkDG55YYLhNPTM0PPSYH1mX+4pGwaHFAu6BQjE37igcb/8KXlYtBOZvIV7zC\nbvib+I/9AEi5iTDBFrcYbKZwGSJ+DPL2TTwtCzazGjbgpzSVFQR/YD7MDpSw\nkO3oonpXSc/OEzRyKh0wAnNakO5KUKnJOM/0wU+JrNtO7YZnv/UG9NX+tLqo\n/Vfkj1dVEmX2Voy4iAxUYY8TZyJYCdy7zLdlpzEBsFcKN6mrwfEMIlHABq20\noJV26DonFQjYrA4JpHl1gOxsF6b7hwF9t26qLsPYFs2fbEnl++jiYI4SW9oF\nsxUZ\r\n=Sgrv\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFHi3hOtzIHkzdz8P0gmjlqkpR0bmB32FbcamclZ4+aDAiEA30H7V/4oZOXle4i1irXPlNBTTFPMsQETmRw1zcBxORc="}]},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_8.1.0_1613314326952_0.2621710721202757"},"_hasShrinkwrap":false},"9.0.0":{"name":"xdg-portable","version":"9.0.0","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-p --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:tests":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-tests.succeeded \"run-s -n rebuild:tests\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -disable-max-line-length -exclude \"(build|dist|vendor)/.*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:tests":"shx rm -fr build/tests_ && tsc -p tsconfig/tsconfig.tests.json && shx mkdir -p build/.targets && shx touch build/.targets/build-tests.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target dist/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.NPM_CONFIG_DRY_RUN; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch dist/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"npm run clean && npm run test --test-dist && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && npm run test --test-dist","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^6.2.0"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@rollup/plugin-replace":"^2.3.4","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typescript":"^4.1.3","unified":"^9.2.0"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/tests_/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"d9efa67b23fd2f9ad7b4d446ea5a6eaba8d5a2f8","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@9.0.0","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-lqB2GcbaYCaeMbLPq5heHy4y9o32mIw1W/Oz+pzPhutVxe7nK3TsmNFBD5fP2F25gg2DMvklpi+jfkkr7bIxqA==","shasum":"ef29210819f68afd50a260a6223b3b432edd278d","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-9.0.0.tgz","fileCount":14,"unpackedSize":85374,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgKWAECRA9TVsSAnZWagAADv4QAIWnoXXwI5grXldeYzAs\nSEZbmVW40qPlV0KfUHt43KJxTTBRH3f1tgib/bWFC/y1+hOeGy4mRh2zwW4Y\nMMq9BCpl/iKgSJdSmhqVo+STaC1lsC2GA0IFMeTEe+6JLu0qjPd8E81uHe+N\n+Ah375T6QbHAztaalIU0mMja0XV1uOmOvq8fI7rwPzh8iYXJcSUf1U9liuod\ntMkS+n8WC+d+7RQ4aI1bK7cudP3A1rNsMicWXNSW+rLGeU1HEUHrwNTtAdDv\nyEf4mmng9qhzTtZzIduOzhaJN6yugmYkkuEuu0pJGWmcIeFV2VEBUHmDkzs0\nrdPuB4It+evNKZVssoa/ppHjRJMoPf2g0LNErD0nEediqRSN6v/fp3QyULPV\nXu5sX6hnppjmkau9dbAkvhXiRFxDzXwPy73S9VgfoRz9J13k32LEdiIkfBc+\nLTmmslcH19Fsk+OCZY/78GVbeQuTl7Fnh1sn9QMOpFZR06qiHtd42Km19GGM\netTZcs76pDiIoD6iUAywWMU5rAErzlrad/uByLABeEIFphOvkuRK7faLMtYe\nTtJXcZG9JCVFiebvk56IuH+PIosqz5BIFKc6iyTt3csN9k0Tzb1TN7+adF84\nnc934mDRyUr7znTW8JKRG90wz9KlHTpm+JS+ZnU/LUeqgzc3n3vz64xTnB+W\nzj37\r\n=4hOJ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCS69w6dOV23J9Sa0YGtdUtpScnPCaFjI7OwDfO4yvdLgIhAJLmpM6xK4pk0QXq8a8BvnhQlViXNduwclucnbOAg3/8"}]},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_9.0.0_1613324292001_0.8376438459320628"},"_hasShrinkwrap":false},"9.1.0":{"name":"xdg-portable","version":"9.1.0","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:tests":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-tests.succeeded \"run-s -n rebuild:tests\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -disable-max-line-length -exclude \"(build|dist|vendor)/.*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:tests":"shx rm -fr build/tests_ && tsc -p tsconfig/tsconfig.tests.json && shx mkdir -p build/.targets && shx touch build/.targets/build-tests.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target dist/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.NPM_CONFIG_DRY_RUN; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch dist/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"npm run clean && npm run test --test-dist && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && npm run test --test-dist","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^6.2.0"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@rollup/plugin-replace":"^2.3.4","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typescript":"^4.1.3","unified":"^9.2.0"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/tests_/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"c2a613df90d3ddd9f0e4876aeea91ec10d58640a","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@9.1.0","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-gAiwEZJaX7kFn3+AfDsaZYqijo/5bM500QHA+Hs3mdizg7lP5o6kVAmsnretTnYWfSAVHMr9hhpnXyopQXfxew==","shasum":"3b0ca33c11babe47e3c6a049fe258d3d0a1978a8","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-9.1.0.tgz","fileCount":14,"unpackedSize":87062,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgKbBgCRA9TVsSAnZWagAAw4cQAIHSTtSF0e12JKSxaYCK\nYc9alzlN7abjFS3Yq2HRZXSCuuuXhLPo438j/ruht4dNXi3yQClCR6fsqaP0\nTUB5boESYv7C4A6Au749uss05riCZEF3hYBRJaG+mfdhcJGpjDWzRtPZlPr1\nvjsp/JT+OCeJyigD8FI7WgqZZxvKtupvWBvKjxaFHh7/83xXndmo5BT/POY/\nRGbdkvGwgrL11mpg0VyJbv9J76UkvZX10m2/t2p/cAYJjB4elua0GxmMs2lu\nKWWboxQLJ+BRaAP9CDx68xvVRz46DChlKcMR8ZQESsEafoeWSQi66GJ1BcUG\noVzp3VSZqcqpUek17vhZeyKH/ZIf7IP4eyrlvm4U38mIvcWnVZmltGDPDpiX\n/f1XSIzR8BoNNGInzs5NNNiQnPyQ01/57XCs9X+xL0Cwx2RX6i3XFH5fBPMh\nVKAlpOttBZmIT46SjHaAW+A/UNMRjsee3aBbAMhExvQMP+pNXNnBKCfAOTu/\n5Voh+GJkJzTBa6DJ+V6FGl8JPcXg/8gvJtyRraGMMkAKK6WFQXeC1jMBM6o/\nWNy+8UkOsFhrR3DHdWOR7q6UovXwFRRiwVLK9C6M3Q4egbVccKzKpthBeNYK\n/vwmUrGJvCgQo5TZONjbw5LOvWS0qXhVLYTrBHyd7pXGUYjb7eU5XVUDf1Ee\n67CZ\r\n=qB0d\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHC3RWSFLhBzMXyze5ZI/x5jWIdPUsR1Rk0sYStIh37VAiEAkkcR5XJTPWJSCWINrJp4XlBdff8h3V4EcYlDCRMay0A="}]},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_9.1.0_1613344864014_0.625762799135998"},"_hasShrinkwrap":false},"9.2.0":{"name":"xdg-portable","version":"9.2.0","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:tests":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-tests.succeeded \"run-s -n rebuild:tests\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -disable-max-line-length -exclude \"(build|dist|vendor)/.*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:tests":"shx rm -fr build/tests_ && tsc -p tsconfig/tsconfig.tests.json && shx mkdir -p build/.targets && shx touch build/.targets/build-tests.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target dist/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.NPM_CONFIG_DRY_RUN; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch dist/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"npm run clean && npm run test --test-dist && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && npm run test --test-dist","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^6.2.0"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@rollup/plugin-replace":"^2.3.4","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typescript":"^4.1.3","unified":"^9.2.0"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/tests_/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"5db76459b237438236918ab2bcab11352bc451b1","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@9.2.0","_nodeVersion":"14.15.5","_npmVersion":"6.14.11","dist":{"integrity":"sha512-E3/6S8WRoQo/AwARr7OdzaNBCXjsJhNgYwF/WoTWXIcXsSyIHAl9R0M829cexIIz29v1sGKnpwsWKeltFCGgoQ==","shasum":"3be3b260eb7326a38d07bb5aa5ea4ada211dba74","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-9.2.0.tgz","fileCount":14,"unpackedSize":85867,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgMsYMCRA9TVsSAnZWagAA9L8P/1Ox6vIstp3TuVt4/CGD\na4IMQSLZL9F9Y9vCI1Ep5vSA19d04+OWEw6yTbY4rGiZ7wndVUgC/YCLvysf\ngHJwyIsLVDY8abzSPs2o854VOd+cKkAMkmiQqYLzEA8OAit78/yULHtlptdQ\nyO9lFs3eZcJPgokqE4OXRdhco+S6ANbJlIabpBgn5ogKcLluMcgSS1tuNvNd\nRvO5qke9VVPA1h+54XDgxrFpEThOlXsA4fq7I4+df7j6ughPJRMbVmRNWYzJ\nqFflw1X4WN6NYXCBhMfI8PtMU/0bhu5aKFaQ1Ym/3INbBUGygXqsJGqP8oR9\nH/IKyKfs3KbF2IlSRwzK+/6b5f5oTS3iN0upC/BBKTyettCiaigmIj+I1k5X\nkjm91ARreUJ+hOchPB3QT9i0dAixq7jnOK7trqW68agWz9uheVQIUZTjekMZ\nokj60yjzkdyUvLLBhv8wwhgI0g3uMaLFFsihKdhijiekH7OCfSRVM29pB7Q/\nRL6WbAxWS/ZjssnMsmpkPu1R6k5FWG0h0+rG7cCr3sVC0hOZGXGFCugokoZu\nUOTgVyR9iTeg9+eMoDvl5LR94FM8X5IHC7Znx5udytPD9BJRDNtydUtRr/0T\nXQXszLcR/w6e7/9EYNh0HQ01hcXvS+NuwpOPWP8MzzFyMjtwgeNSrE+MlKfL\nSl7r\r\n=kLrV\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFNPe06LVEGHBtzGpT7zGXkkSLdljO2DwZexgj6d9c6ZAiAFdtc4DjTgl5mOhFpiZIz6/MCI+slMPlpbN5t7pYYriA=="}]},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_9.2.0_1613940235597_0.7730752136553758"},"_hasShrinkwrap":false},"9.3.0":{"name":"xdg-portable","version":"9.3.0","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:testbed":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-testbed.succeeded \"run-s -n rebuild:testbed\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -disable-max-line-length -exclude \"(build|dist|vendor)/.*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:testbed":"shx rm -fr build/testbed && tsc -p tsconfig/tsconfig.testbed.json && shx mkdir -p build/.targets && shx touch build/.targets/build-testbed.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target dist/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.NPM_CONFIG_DRY_RUN; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch dist/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"npm run clean && npm run test --test-dist && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && npm run test --test-dist","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^6.2.0"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@rollup/plugin-replace":"^2.3.4","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typescript":"^4.1.3","unified":"^9.2.0"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/testbed/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"d1901a6e87d6b692a382ee49645ceb6eb874d621","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@9.3.0","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"integrity":"sha512-G6MwWSYnR6DjohcYCeia8nzQVv+gydehlrpYwEVVrCg3iAibN2zboOXX6r55+teVbACsOFSulSVsIU6+UhgZWw==","shasum":"2f68bbf67565432c988272d3e3ef205c9cd6d64d","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-9.3.0.tgz","fileCount":14,"unpackedSize":87027,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgMzaXCRA9TVsSAnZWagAA6LkP/2ayct+MFb0jtEzjrv48\nVMIuzp8ebruP5bEzqwYSHo09DDDQqYXZ2uHKr6dNouc474q1HK+br4bC64ld\n7oENv6L+o3FI5pWDu9T314tfALyv8R7xt3o84YoKJKI5z+y1jXsrID03KuvF\nO9QHtemFCGCLHOyz5oiHkgmTajp/cjZaEg8ItMSRR4/i8r/tlq2TCc1hWxZ8\nSPdD7HFEJ17jfkxeiks0dN6YeI566SZtNjk60JJ16pw1j9ovDTU7DG6RQq2t\nJrHC+3pwy8u8RLURYgJamBmfEV/UYm/rIInP/1pGarfFtogtEAJFzOuzpImz\n2N0QPw+2IXSUZVz3QyMmMuJz/xLFuL+cznMYZ+UGECCMRa/0fDIb+JteXU2A\nquy/QHsudGCRnUGXngzwo9Y/fSrOaOezVpRGnW+IoaC0wABFqdojLQ8qa/dE\nS/Tgv0sezpI5XSTMQQIU5u+X8SXzjJehLwwrOIvvklMtryB1cgDzzJIDaeSS\nT+XAmHHCJkhCIZG1CprN6L5WNusfX6ySptCu/EqxI/7S08j+rwC+5eHZTdRs\nfaxzKLqIbxFH3rxp60xbPnDvwHrdjxro6+icpPVy7lKu7CkH8IZdrlNQj5HS\nd9BvRr9erqUpxCNs+YftPLr7VGtAoGM8UXGh0h1Hzj0Ym6TepchZQVpeaVmx\n6A5H\r\n=RvAK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFT5kIVDhtz8/qTJ57VjO57CCPwzEvLD29NL5ueww7KEAiEA+exobjeRsXUzovuyMML6gDDf7wJB7n5XrbPEklbo2Ts="}]},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_9.3.0_1613969047302_0.9744617162843339"},"_hasShrinkwrap":false},"9.4.0":{"name":"xdg-portable","version":"9.4.0","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:testbed":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-testbed.succeeded \"run-s -n rebuild:testbed\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -disable-max-line-length -exclude \"(build|dist|vendor)/.*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:testbed":"shx rm -fr build/testbed && tsc -p tsconfig/tsconfig.testbed.json && shx mkdir -p build/.targets && shx touch build/.targets/build-testbed.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target dist/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.NPM_CONFIG_DRY_RUN; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch dist/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"npm run clean && npm run test --test-dist && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && npm run test --test-dist","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^6.2.0"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@rollup/plugin-replace":"^2.3.4","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"^4.1.3","unified":"^9.2.0"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/testbed/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"ad1bdab269e4c3cb3d7d153d96484c998ffb3fcb","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@9.4.0","_nodeVersion":"12.20.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-L6M5PMpxOJeT5FGnI5TjrN2jPT/rdwu+/aEjO9gbY7wLe4qq+v9oPYJpqqlaL6qNc6zE/Usmq0dvkA793nfBqw==","shasum":"cbbcffd4c9faf2f3b1c6cba04b799f885e20f31e","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-9.4.0.tgz","fileCount":14,"unpackedSize":87680,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgOqXzCRA9TVsSAnZWagAA7zkQAJ312YP4Y/0g7D1rKPvk\n3kDTT7fymd8YP3PD4qmOpiFZZAiys1LLSvVNDnJ4RxiFcPYW56EyXa83Vl18\n8abyAstcAphlnWDUYTthbyNlDOpjOLnzQWsrZ2GubsdbOiVLgLepNdz8PNWX\n3kM3amYknxiu4ehCwaAFSwZn7B7kIdEhC0MpBgzGsywVwHkbt6E1ykqwvy4g\npzO7jlUlP3sKlAx+2rq/KO4YAq6qRE0Yj5ISJ2CwrDzz00TJDcWU1Aaz7ha9\ncGjPX/S1929WqiXgNK2Qu2SNizlosDezC2kwZ1GGnEJJ0lGwQfdeU4+dEszm\nrn3cgn2NdHWZfi/OXxzn1k23BtTF0sQRu8XGcH8wxQ5k4CaV9i2RnGC8mBvj\nv6V6iSFLXFqtcEezd25gsZAqwVUf2nHY2eLnFhBK0vW4BfHmZxKDnLBbRKv2\noRDcj0tGls1rjIJDhSqTtnae3FekFLaHpqJmfevVYBTb7sBEDlR4GpqgHrLB\nuWHKTnR17MgmgjuVE69OjySoAamYiIUasb1EVxCt2CpfS/dGeZMA3rwr0S+D\nu6zEj3l/sdDLDgzK4PaxtzWS76Yvio5BKoRi8ZRoE2TjLGSxPmpMaawE9b+s\n27nuh2HmT4nQnYEIAVY+BtsdvU9zhkzlJhsMb6ZeNPAWaB65Fdhfmx7sxhtW\nE2jZ\r\n=aiuf\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD2nE3g5e4WmTa3ka+xISz9eVebmXCeXWG01YBxqs4chgIhANCHSsFdG0aywFlUJVJeWrR6Obgkvntdvrb32OylUxf8"}]},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_9.4.0_1614456307300_0.9497851232588232"},"_hasShrinkwrap":false},"10.0.0":{"name":"xdg-portable","version":"10.0.0","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:lab":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-lab.succeeded \"run-s -n rebuild:lab\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write --list-different","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -config .ecrc.JS.json","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --check --loglevel warn","# prerelease # clean, rebuild, and fully test (useful prior to publish/release)":"","prerelease":"run-s clean verify","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","# rebuild:all # clean and fully reconstruct project distribution":"","rebuild:all":"run-s clean build update","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:lab":"shx rm -fr build/lab && tsc -p tsconfig/tsconfig.lab.json && shx cp -r src/esm-wrapper build/lab/src && shx mkdir -p build/.targets && shx touch build/.targets/build-lab.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && cross-env-shell ava $npm_config_ava || ( run-s --silent +:min-node-10 && cross-env-shell nyc --silent ava $npm_config_ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target build/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","# verify # fully (and verbosely) test package":"","verify":"cross-env npm_config_test_dist=true npm_config_ava=--verbose run-s test","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.npm_config_dry_run; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && replace-in-file \"export { _default as default }\" \"export = _default\" dist/types/mod.cjs.d.ts --quiet && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch build/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"npm run clean && cross-env npm_config_test_dist=true npm run test && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && cross-env npm_config_test_dist=true npm run test","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^7.0.0","fsevents":"*"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","cross-env":"^7.0.3","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"https://cdn.jsdelivr.net/gh/rivy/js-cli.exec-if-updated@2.2.0/dist/pkg/exec-if-updated.tgz","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":">=6.0 <7.0","prettier":"^2.1.1","remark-cli":"=9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","replace-in-file":"=6.3.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"~4.2.0","unified":"^9.2.0"},"optionalDependencies:#":"* 'fsevents' included to avoid `npm ci` errors with early npm versions; ref: <https://github.com/bahmutov/npm-install/issues/103>","optionalDependencies":{"fsevents":"*"},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/lab/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["build/cjs/**","build/esm/**","build/umd/**","eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"722550880fda309e0dffda2505c7f4983d01cb06","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@10.0.0","_nodeVersion":"12.20.2","_npmVersion":"6.14.11","dist":{"integrity":"sha512-epDEzRom91HOcza0Cmj5qSeP/bRj0vYJY/MSGQVoDcoVgpHXSmohFuUO4Kj3HWZ7UKev3M+v7eI6mEqiZnm1SA==","shasum":"36c930a96c7d8b4d7f836e3ebfae18e7a0b17b20","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-10.0.0.tgz","fileCount":14,"unpackedSize":110600,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICrt2bCOZhEYGoit/YKZ88XdGGGyg2Goz1sT1QBLj3mBAiEA50BXoQ+SmdBMjq55TLbw1MDFOz83q7WxYZ0EkbwWyQc="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi7QDXACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr1Yg//WyBvotcgUJTGv+GjXv43K+zWJAzc64djVArpwPrzDmfX0d5z\r\nSPBNIZjxODgHiBhkjTFrjbXL6hpLo6h9HuOwMa5CHv51SPJAj0tu+2bkCOtC\r\npROJmbPuksoAw+Pt12PBsOuzKPTqBlK1zO+HaxwpRpkYoI6NM4DlTCUrQeQq\r\nJjTknb6ejdjnhw7kdDut3Kip/qxL2YRhZhjwBtr1iJ2v79E3CcX1Ba3vWgfk\r\nggxJGdbGqvyTeITwWsQjpV80/mHlSWprvrqpqO+ozlmYMxdDQmOd5kttzltC\r\nYv6VjuU9ut7bH9hgRzkEO0ocJ0uiTZG7zf3TFAXSOIlm3vdsL+i95Ax6oo/7\r\nx1JC/MdjeQTA51LXMfldsnzd1oYjONsCKfAg8AnRrnumn0PWPdQsqs1Hlfp1\r\nSnGb2DON5yWjPnNKMKQELzNWsTGwHiCvVziCC4XeSs3mQ9ry3KEZmxkGSx3p\r\nfXzUsBpAya54nmH9Skv0Ts001fmEYMgLo0HToAPWz3UJf5Ucw0mmUoAIr1Dv\r\nfQLkIQhy7VZ4odcXOx60hGxxM1hO4QyQ7nLps//iSqqnNzjWccHK0zid0Ifw\r\nM/K51GCRsJhLRzrqzA4gKj2xQ2Tn4ju4xFSs1FnCbQTQie3k3QYjhnKKL2wm\r\ndHlC3YjS6XM0KteLvAyVeVxYvqEVro6aP5U=\r\n=+X9j\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_10.0.0_1659699414921_0.16187914622820454"},"_hasShrinkwrap":false},"10.1.0":{"name":"xdg-portable","version":"10.1.0","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:lab":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-lab.succeeded \"run-s -n rebuild:lab\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write --list-different","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -config .ecrc.JS.json","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --check --loglevel warn","# prerelease # clean, rebuild, and fully test (useful prior to publish/release)":"","prerelease":"run-s clean verify","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","# rebuild:all # clean and fully reconstruct project distribution":"","rebuild:all":"run-s clean build update","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:lab":"shx rm -fr build/lab && tsc -p tsconfig/tsconfig.lab.json && shx cp -r src/esm-wrapper build/lab/src && shx mkdir -p build/.targets && shx touch build/.targets/build-lab.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && cross-env-shell ava $npm_config_ava || ( run-s --silent +:min-node-10 && cross-env-shell nyc --silent ava $npm_config_ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target build/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","# verify # fully (and verbosely) test package":"","verify":"cross-env npm_config_test_dist=true npm_config_ava=--verbose run-s test","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.npm_config_dry_run; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && replace-in-file \"export { _default as default }\" \"export = _default\" dist/types/mod.cjs.d.ts --quiet && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch build/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"npm run clean && cross-env npm_config_test_dist=true npm run test && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && cross-env npm_config_test_dist=true npm run test","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^7.1.0","fsevents":"*"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","cross-env":"^7.0.3","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"https://cdn.jsdelivr.net/gh/rivy/js-cli.exec-if-updated@2.2.0/dist/pkg/exec-if-updated.tgz","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":">=6.0 <7.0","prettier":"^2.1.1","remark-cli":"=9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","replace-in-file":"=6.3.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"~4.2.0","unified":"^9.2.0"},"optionalDependencies:#":"* 'fsevents' included to avoid `npm ci` errors with early npm versions; ref: <https://github.com/bahmutov/npm-install/issues/103>","optionalDependencies":{"fsevents":"*"},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/lab/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["build/cjs/**","build/esm/**","build/umd/**","eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"dcd0a547f2e0134a2ee8b363309b77e57ea73206","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@10.1.0","_nodeVersion":"12.20.2","_npmVersion":"6.14.11","dist":{"integrity":"sha512-1rScf9zSEZcIYxuYi++BBBV9oXKiM6B3Y6iI6sCGu3q7PRSO4o1ei8Ag3N27RhieV3Enf/IJQWSehF2Ct1XWIQ==","shasum":"383fa732e48aa2bdf520d9ead6042b32d96d3096","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-10.1.0.tgz","fileCount":14,"unpackedSize":111183,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEhgTjhv93ugFp1OhILMMEvqp6QxZjg8U5ACmnT8/41JAiEAydtt7lA+i725PIrIJoQeBvTCWEGvhbdIwqlPHVpVT4E="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi7sB8ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrlOw//fwrXUJfZVfrV1085k/XZepVMddzL1GwWOTkMhwTU5DGca2Ir\r\nwDVmXD/GrM0yC/U2YnhnWSjxPmsHJQe5r1APJOJsHCQldi86v4SIxqPOIXIb\r\nBgqcJjEzLcFifFXeA8XOISNK1SMn7Lc78yJ17R28KW7e+CP3A8i0l4TcHQkv\r\nVeqIw/X0wwMXnjaX0GiyLjLaX4bx98UWFGxA1NJCQEAyn+E5r44KpYsBcNrN\r\nKmll3jG3q2Tro1AhHKS+94vF/+5sqJnWU47i7pTIHXYPrFCqVDctJS0klKIX\r\nu9bizOayky6bRdOYKJ3/0NT9SoWCSngaIyzU4OlUkRlI/IFZeFAvBaguyG1y\r\npOhq0eSKRQI+ro50AdG0q9Pxv53q5PNYgKDZOaSYTxTMEqgDMzsQiFCwWds5\r\nLPbxN4NugUc1yOf+GistbB+OI7NozlE7DI4rdIr/B45wCRctR6uMUYO8+ibS\r\nPZuTaqgDjw0ZQjIcpgbZQGlrTaQN8mbCmOeXCRZ/BQVdvLc6nqAd3OGz1wVn\r\nL0l5YcBHqvArITd3XJOyNMiiwQy63/x2S7tJqNzUuITw+dd6KAO3b7GwLEcX\r\nNSKpzlu87meFwiJiYNJK52IcCk61BrJOmmgtFZnx8iZ37sOlolsbFmsuVAzq\r\n4Sg2xbmCfX8wdqaY1MLNHhsVjlN9OucEW4o=\r\n=koSO\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_10.1.0_1659814012615_0.8036821566428802"},"_hasShrinkwrap":false},"10.2.0":{"name":"xdg-portable","version":"10.2.0","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:lab":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-lab.succeeded \"run-s -n rebuild:lab\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write --list-different","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -config .ecrc.JS.json","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --check --loglevel warn","# prerelease # clean, rebuild, and fully test (useful prior to publish/release)":"","prerelease":"run-s clean update verify","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","# rebuild:all # clean and fully reconstruct project distribution":"","rebuild:all":"run-s clean build update","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:lab":"shx rm -fr build/lab && tsc -p tsconfig/tsconfig.lab.json && shx cp -r src/esm-wrapper build/lab/src && shx mkdir -p build/.targets && shx touch build/.targets/build-lab.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && cross-env-shell ava $npm_config_ava || ( run-s --silent +:min-node-10 && cross-env-shell nyc --silent ava $npm_config_ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target build/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","# verify # fully (and verbosely) test package":"","verify":"cross-env npm_config_test_dist=true npm_config_ava=--verbose run-s test","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.npm_config_dry_run; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && replace-in-file \"export { _default as default }\" \"export = _default\" dist/types/mod.cjs.d.ts --quiet && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch build/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"run-s clean update && cross-env npm_config_test_dist=true npm run test && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && cross-env npm_config_test_dist=true npm run test","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^7.1.1","fsevents":"*"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","cross-env":"^7.0.3","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"https://cdn.jsdelivr.net/gh/rivy/js-cli.exec-if-updated@2.2.0/dist/pkg/exec-if-updated.tgz","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":">=6.0 <7.0","prettier":"^2.1.1","remark-cli":"=9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","replace-in-file":"=6.3.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"~4.2.0","unified":"^9.2.0"},"optionalDependencies:#":"* 'fsevents' included to avoid `npm ci` errors with early npm versions; ref: <https://github.com/bahmutov/npm-install/issues/103>","optionalDependencies":{"fsevents":"*"},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/lab/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["build/cjs/**","build/esm/**","build/umd/**","eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"3030594e021744d6c636319ffb6074c08bdc53b0","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@10.2.0","_nodeVersion":"12.20.2","_npmVersion":"6.14.11","dist":{"integrity":"sha512-vQPNiuB1hkpMmTuX0faL/9wSb/NvamJzqeTowokGYWxe1Rp3ATxJt8p23w+8SFRwRaeGlIEbqaRVJvTleaUHxQ==","shasum":"a3fd2d19b3d0692c82190c3983a6516e375c04eb","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-10.2.0.tgz","fileCount":14,"unpackedSize":112176,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCBlPuN4efIfoLbVrsrFk4TZu8FXD0a3pgWnlRxVtQgHAIgWanBxbzVL9/OuNG1IfJxiuLMkgg2P7qs2oALA9xGW9s="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi7uEbACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmpnbg//bYaeq+Vc/tzU3qXkjoO2E3DT79hL39RbhQp/l4pYGDmku/xr\r\nJmtg349zpqnvHdbX75GyTbrFA8oPGXTuY52Dr44pb/UvqGB0Tft6agq2E3pc\r\nB82XI+M1JRIje+Vn7PSUMefoXPc4FDuDkxLLo5xi/mqWxPGm/aqdPUTaZgFk\r\nTD2nCyhanregj/MoK8RtwqAEVG8PZ8/y1KbnlpjbbDKCORIFrdFDGOTPA8ef\r\nRKlNZ7XgkujVPdoXp1H4GBE0nOE7xg2lQjDXxwuHdFrhtlLDGVyoOrAAs1oK\r\nEIQtTSuSGBs/SP5PIINzWaLc+myJcrhb786FcGGIUFZme5VW0ulMYfi+zS7f\r\nGjIp9L5om2sNBzCVQJxW2P+gn5PMmJ1JmQBOInTtkFrdg2wBtFjoCm20dPsM\r\nrDE2QAdwTXSHfkBZgYb8Y3ADBctmMNZl86ogw6ViT6yCPwKCcO2cBihHNBmO\r\nwet+T1BGMgl3bAQ0y74n5bsPUTg7BCyG95ZIUsG535HoJHhPRUZ0kQ0UZTXF\r\noN0YGwxG2g6Twh8cJes8Qh4AKVSvF/wZGrhAzNPmiaaBS7aXOrteyXK8pgYc\r\nM9fCjJha4A2IYfLhBkSLXYoRz/Ys8yaLjoOyLNzbZ8YRVSWYUqm6lSnhfOtP\r\nVxjELs5FpNCDabgfBlRjb6aw36esi7NpnaU=\r\n=fmPH\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_10.2.0_1659822363618_0.5457334432542462"},"_hasShrinkwrap":false},"10.3.0":{"name":"xdg-portable","version":"10.3.0","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:lab":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-lab.succeeded \"run-s -n rebuild:lab\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write --list-different","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -config .ecrc.JS.json","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --check --loglevel warn","# prerelease # clean, rebuild, and fully test (useful prior to publish/release)":"","prerelease":"run-s clean update verify","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:all":"run-s clean build update","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:lab":"shx rm -fr build/lab && tsc -p tsconfig/tsconfig.lab.json && shx cp -r src/esm-wrapper build/lab/src && shx mkdir -p build/.targets && shx touch build/.targets/build-lab.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# refresh # clean and rebuild/regenerate all project artifacts":"","refresh":"run-s rebuild:all","# refresh:dist # clean, rebuild, and regenerate project distribution":"","refresh:dist":"run-s rebuild update:dist","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && cross-env-shell ava $npm_config_ava || ( run-s --silent +:min-node-10 && cross-env-shell nyc --silent ava $npm_config_ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target build/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","# verify # fully (and verbosely) test package":"","verify":"cross-env npm_config_test_dist=true npm_config_ava=--verbose run-s test","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.npm_config_dry_run; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && replace-in-file \"export { _default as default }\" \"export = _default\" dist/types/mod.cjs.d.ts --quiet && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch build/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"run-s clean update && cross-env npm_config_test_dist=true npm run test && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && cross-env npm_config_test_dist=true npm run test","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^7.2.0","fsevents":"*"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","cross-env":"^7.0.3","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"https://cdn.jsdelivr.net/gh/rivy/js-cli.exec-if-updated@2.2.0/dist/pkg/exec-if-updated.tgz","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":">=6.0 <7.0","prettier":"^2.1.1","remark-cli":"=9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","replace-in-file":"=6.3.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"~4.2.0","unified":"^9.2.0"},"optionalDependencies:#":"* 'fsevents' included to avoid `npm ci` errors with early npm versions; ref: <https://github.com/bahmutov/npm-install/issues/103>","optionalDependencies":{"fsevents":"*"},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/lab/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["build/cjs/**","build/esm/**","build/umd/**","dist/**","eg/**","test/**","**/*.test.*","**/*.spec.*"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"2881048f141a5e5341e224c9b6aab4bb17079ce7","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@10.3.0","_nodeVersion":"12.20.2","_npmVersion":"6.14.11","dist":{"integrity":"sha512-KjORguW1KTKZ0G/ef3aBSlF7nvvULMNVobIWLyAppZDe6S3uj7u48N+3JsR/a/rYmW2/u4gncoUBmDAdw4rj6w==","shasum":"1f97b95cadb02a593e36293de9a5e97a980ab78d","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-10.3.0.tgz","fileCount":14,"unpackedSize":114064,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAIL94RjOAHH+qVS1uQg/CjyqW26LQ6Iqn88+qw9RRH5AiAuG1CHSKI4fY0amN10aR7jrzqe3HsKxV7QxjzebAHHUQ=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi8uBuACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrNvBAAi/RSbNMtes+5S1io8xhQOpXtKx9TsKuBFhOBCeAlT4ZkdnYc\r\nZXP7fPTq8ccE9/nMRpMKw2VfD6bl1+0f1B4LHWDCRvNDyijpcrlzkhEJyR+/\r\nxZ9+9x95pXD8QVXzrXPEPl5X9AXzNu8wW5lSPavXCd9eRfokfMrF6mkJnzOK\r\nkjruZzlfWUjv9n0s09aZD7Y4pWDMpk4PEUsUNA+5xtWhaG83n6GMCL5gLc8A\r\nXCXyVGim1OArD8zAyHhNYlFZu4Vt88QMYkBNykJOAa0dsZY7I5aRPum5NxEK\r\ny6hD3dg7aAZNc7/YJDDV2I7CavguIX5inagFwmBLJOMUMT4YeAVnSmkfLA4/\r\nk4wpsBBvZEL0OHT7jZ1BqYzGo4cZhDE9DBxLwyphiqDboID5nGQObIEtMyax\r\nx2/xGKbGLBokzihYBJvGKTZQvqrQ8MYag5pjiz/hdkHs3vbFJgDrivbeWeow\r\n81Z3YiDyxS3D2qC7EudweG+69l24vpVN6OdYYBwrKCNPiiuFwSO0hMYLRcnv\r\nH+tu3URnoqezmQJN4qP7mc5bLpsRrrIoenLPKU1ahcO6zLlH9haSc8o0P/Iv\r\nfDaPPCjTHAzbiDWg5FW0ewiR9kPRTL0Ew6Roj0YpYCNAHkjuHI22nS6qgqFX\r\nelpfvKDG3sYlLab1GWiFfttvYBCIxzekZrE=\r\n=bfIN\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_10.3.0_1660084334069_0.6041712430116399"},"_hasShrinkwrap":false},"10.4.0":{"name":"xdg-portable","version":"10.4.0","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:lab":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-lab.succeeded \"run-s -n rebuild:lab\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write --list-different","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"( run-s --silent _:v_tag:missing || shx true ) && run-p --silent \"_:lint:commits:new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -config .ecrc.JS.json","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --check --loglevel warn","# prerelease # clean, rebuild, and fully test (useful prior to publish/release)":"","prerelease":"run-s clean update verify","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:all":"run-s clean build update","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:lab":"shx rm -fr build/lab && tsc -p tsconfig/tsconfig.lab.json && shx cp -r src/esm-wrapper build/lab/src && shx mkdir -p build/.targets && shx touch build/.targets/build-lab.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# refresh # clean and rebuild/regenerate all project artifacts":"","refresh":"run-s rebuild:all","# refresh:dist # clean, rebuild, and regenerate project distribution":"","refresh:dist":"run-s rebuild update:dist","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code (use `--test=...` to pass options to test harness)":"","test:code":"run-s --silent +:max-node-8 && cross-env-shell ava $npm_config_test || ( run-s --silent +:min-node-10 && cross-env-shell nyc --silent ava $npm_config_test )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target build/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","# verify # fully (and verbosely) test package":"","verify":"cross-env npm_config_test_dist=true npm_config_test=--verbose run-s test","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits:all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","# _:lint:commits:new:... * note: review from 'origin/last' or tag just prior to version-sorted latest, with fallback to first commit":"","_:lint:commits:new:commitlint":"node -e \"result=require('child_process').spawnSync('( git tag --list [#v]* --contains origin/last --sort=v:refname || shx true ) && ( git describe --tags --abbrev=0 HEAD~1 || shx true ) && ( git rev-list --max-parents=0 HEAD --abbrev-commit --abbrev=16 || shx true )',{shell:true,encoding:'utf-8'}); o=result.stdout.split(/\\r?\\n/).filter((s)=>!!s); vs=o; v=vs[0]; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from '+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error(\\`[commitlint] ERR! Flawed commit(s) found (within '${v}..HEAD')\\n\\`+result.stdout+'\\n'+result.stderr); process.exit(1);} else { (result.stdout.length > 0) && console.log(result.stdout);};\" || shx true","_:lint:commits:new:spell":"node -e \"result=require('child_process').spawnSync('( git tag --list [#v]* --contains origin/last --sort=v:refname || shx true ) && ( git describe --tags --abbrev=0 HEAD~1 || shx true ) && ( git rev-list --max-parents=0 HEAD --abbrev-commit --abbrev=16 || shx true )',{shell:true,encoding:'utf-8'}); o=result.stdout.split(/\\r?\\n/).filter((s)=>!!s); vs=o; v=vs[0]; result=require('child_process').spawnSync('git log '+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error(\\`[cspell] ERR! Unknown words in commit(s) (within '${v}..HEAD')\\n\\`+result.stdout+'\\n'+result.stderr); process.exit(1);} else {(result.stdout.length > 0) && console.log(result.stdout);};\" || shx true","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.npm_config_dry_run; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && replace-in-file \"export { _default as default }\" \"export = _default\" dist/types/mod.cjs.d.ts --quiet && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch build/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"run-s clean update && cross-env npm_config_test_dist=true npm run test && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && cross-env npm_config_test_dist=true npm run test","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^7.2.0","fsevents":"*"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","cross-env":"^7.0.3","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"https://cdn.jsdelivr.net/gh/rivy/js-cli.exec-if-updated@2.2.0/dist/pkg/exec-if-updated.tgz","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":">=6.0 <7.0","prettier":"^2.1.1","remark-cli":"=9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","replace-in-file":"=6.3.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"~4.2.0","unified":"^9.2.0"},"optionalDependencies:#":"* 'fsevents' included to avoid `npm ci` errors with early npm versions; ref: <https://github.com/bahmutov/npm-install/issues/103>","optionalDependencies":{"fsevents":"*"},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/lab/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["build/cjs/**","build/esm/**","build/umd/**","dist/**","eg/**","test/**","**/*.test.*","**/*.spec.*"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"2bd6a13adbb13d21db457ed6884b0bf74c585020","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@10.4.0","_nodeVersion":"12.20.2","_npmVersion":"6.14.11","dist":{"integrity":"sha512-+1UEqKEgOVt0Ery47jTOp9HVE0Epiqird4OaENh7VuQe5SEPHMEdXshPIdHy7l9+rucGG8ymC3dcMk5Q5nmSpw==","shasum":"b6a56c80ab30399d4f392df0c3a7d3d8c8757782","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-10.4.0.tgz","fileCount":14,"unpackedSize":117375,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCMBtICJSsG5NWMrZKI4HWjDeBt7JF4ghzRErbkqWfbdQIgAepO779HA7sJI5Eds6Dy7Wmn6qX3tI7ZQSBbQlcuOjY="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi9HcfACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr+MQ//VJHHV7laJYVQQ/kBBNx0BmwuLfxaM79Ot1oINvLjie8HjMKS\r\nDzwFFWm3JcehZiQ4MM4Sw0Zje6lF+gmUbQD8z190Vk4HzbRCgJpUn/dOSEY3\r\nQXuu1wbYR+A8FMonyvb+Ma0uFPFIGHGjQK3IBswiSHnArRbAjXrqWpy2KMwh\r\nATF0pDOus9LlftbbapY/Y0Uocbu+0eE94Q5E6GduZ+ZGKoK9MDXxCxVSXZVS\r\nwtE8BnIY3QOpNSA/bu0MqWVL2jKhYGu9t7uqMGs4iJENKfuMcSx8YtVFVysk\r\nRvomUo0Sgwu0NdezstDIfBgWiVj03rGi+U9lvDd29Ja1p8VNRJHsM/S5Xjh+\r\nxPqctyyp1U4Jv1iJkAi5SXOf6sdQrYZEsWEnj1fM3V8ragCGF2zMUbDm2bDn\r\nKgYzfTKJk3iH0rEUEnLwk11ONvcMRB0kyg6tz05KqHXK/dO6RLvwA7GiwbYv\r\n3TiHQli2MslEvP67sQyakGBy3FCbR8akecHzpD9O+gyPo/r/f12kNP43B62g\r\nZSFx5IOOmlp7XMEG1xrnmnv6bskHv7EXZVHzne3pGLAqj/VxoMjb9nwSni9D\r\nFFe0FltAeGt7yuLqI71348X6JHEk8CN152jFrIC4dvFXQcIzGWfJ+tT+89hJ\r\nANnP15ajuUICJJbT5iX7ypBr2YT1iubOTVc=\r\n=We5D\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_10.4.0_1660188447660_0.18556394981857616"},"_hasShrinkwrap":false},"10.5.0":{"name":"xdg-portable","version":"10.5.0","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:lab":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-lab.succeeded \"run-s -n rebuild:lab\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","#* cov:send # use `--cov-send=...` to pass options to coverage uploader":"","cov:send":"shx mkdir -p coverage && nyc report --reporter=text-lcov > \"coverage/@coverage.lcov\" && cross-env-shell codecov --disable=gcov --file=\"coverage/@coverage.lcov\" $npm_config_cov_send","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write --list-different","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-p --silent \"_:lint:commits:new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -config .ecrc.JS.json","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --check --loglevel warn","# prerelease # clean, rebuild, and fully test (useful prior to publish/release)":"","prerelease":"run-s clean update verify","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:all":"run-s clean build update","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:lab":"shx rm -fr build/lab && tsc -p tsconfig/tsconfig.lab.json && shx cp -r src/esm-wrapper build/lab/src && shx mkdir -p build/.targets && shx touch build/.targets/build-lab.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# refresh # clean and rebuild/regenerate all project artifacts":"","refresh":"run-s rebuild:all","# refresh:dist # clean, rebuild, and regenerate project distribution":"","refresh:dist":"run-s rebuild update:dist","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code (use `--test-code=...` to pass options to testing harness)":"","test:code":"run-s --silent +:max-node-8 && cross-env-shell ava $npm_config_test_code || ( run-s --silent +:min-node-10 && cross-env-shell nyc --silent ava $npm_config_test_code )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target build/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","# verify # fully (and verbosely) test package":"","verify":"cross-env npm_config_test_dist=true npm_config_test=--verbose run-s test","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:debug:env":"node -e \"console.log({env: process.env})\"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","* _:help # print usage/TARGETs by matching lines containing leading double-quoted text like `# TARGET_NAME # HELP_TEXT`":"","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:#\\s*)(\\w[^#\\x22]*)\\s+#+\\s+([^\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits:all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","* _:lint:commits:new:... * note: review from 'origin/last' or tag just prior to version-sorted latest, with fallback to first commit":"","_:lint:commits:new:commitlint":"node -e \"result=require('child_process').spawnSync('( git tag --list [#v]* --contains origin/last --sort=v:refname || shx true ) && ( git describe --tags --abbrev=0 HEAD~1 || shx true ) && ( git rev-list --max-parents=0 HEAD --abbrev-commit --abbrev=16 || shx true )',{shell:true,encoding:'utf-8'}); o=result.stdout.split(/\\r?\\n/).filter((s)=>!!s); vs=o; v=vs[0]; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from '+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found (within \\'%s..HEAD\\')\\n'+result.stdout+'\\n'+result.stderr, v); process.exit(1);} else { (result.stdout.length > 0) && console.log(result.stdout);};\" || shx true","_:lint:commits:new:spell":"node -e \"result=require('child_process').spawnSync('( git tag --list [#v]* --contains origin/last --sort=v:refname || shx true ) && ( git describe --tags --abbrev=0 HEAD~1 || shx true ) && ( git rev-list --max-parents=0 HEAD --abbrev-commit --abbrev=16 || shx true )',{shell:true,encoding:'utf-8'}); o=result.stdout.split(/\\r?\\n/).filter((s)=>!!s); vs=o; v=vs[0]; result=require('child_process').spawnSync('git log '+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s) (within \\'%s..HEAD\\')\\n'+result.stdout+'\\n'+result.stderr, v); process.exit(1);} else {(result.stdout.length > 0) && console.log(result.stdout);};\" || shx true","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.npm_config_dry_run; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && replace-in-file \"export { _default as default }\" \"export = _default\" dist/types/mod.cjs.d.ts --quiet && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch build/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"run-s clean update && cross-env npm_config_test_dist=true npm run test && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && cross-env npm_config_test_dist=true npm run test","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^7.2.0","fsevents":"*"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","cross-env":"^7.0.3","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"https://cdn.jsdelivr.net/gh/rivy/js-cli.exec-if-updated@2.2.0/dist/pkg/exec-if-updated.tgz","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":">=6.0 <7.0","prettier":"^2.1.1","remark-cli":"=9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","replace-in-file":"=6.3.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"~4.2.0","unified":"^9.2.0"},"optionalDependencies:#":"* 'fsevents' included to avoid `npm ci` errors with early npm versions; ref: <https://github.com/bahmutov/npm-install/issues/103>","optionalDependencies":{"fsevents":"*"},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/lab/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["build/cjs/**","build/esm/**","build/umd/**","dist/**","eg/**","test/**","**/*.test.*","**/*.spec.*"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"0a9d59edbc7a3e6953f24b4713cbfce2b42ab2d4","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@10.5.0","_nodeVersion":"12.20.2","_npmVersion":"6.14.11","dist":{"integrity":"sha512-NyNqfhayBBfre2c/z7i8p0S6Y9k3URiYH9SDR+LeBIZ2qvb+i8pTswnBdqch0LYi8yeZ9i3gXIKloWUlU/lUcw==","shasum":"c4e0d8c14d7ab1c7aac3a90d2fc92b8c4fbff028","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-10.5.0.tgz","fileCount":14,"unpackedSize":119345,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFoGjTlSbKGr4/61KUlqB42R9bwLpT45KLlQk7uMdtJcAiEAmPDUH/vtuSfWX/LTW/wITZEdo7Y6zyCTQgMG/1XTJqw="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi98/NACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpmMQ//e02cSQLKcCL6Jdr0U8J+Rx84W5t0SlygkPaPUepesjGR+oyW\r\nqmkRJbIJJK52Cg5rljPh8bSVdYW8Zksk7qQxMFNClv0OFSISfs+Hox0hzxJU\r\nAUA3a5N92/dJb80D5bhSUCSX7TuizeCUXUdsiqZTG6yL9EaN7FyJB6HXc0J1\r\neYcmYKCAc5HR6BYXR7iNiKKpv3YqDH8fWcR2VwwcbKzi6oOWJ0Fm5IU4AXM8\r\nW/tmNXnp/u5gbLe8H0zMqP1DjLMZhryWOodi/OjwF3jdXhFP2QrYYGxYUXVi\r\nZVQJ/ooTUmWnd/Pp4/XS5/VnENUCp9nEd3HVLDPmThTEpnd62thALtbJn6ny\r\n6Om9RS6YKRkrXGPoOjwNX3ZAKII5SMmZKyd0oaIOWbOiAgCAAQSaswI3Hr9Y\r\nFBT/lLnKbAw86hIJXRKaqoqI9ul4trYNHn6lgEIyArnnY62LvJO36Yiwi309\r\ntrJcAJcWD6NAV8ia5U6R+8ElAi118WQ8UQjY88lB8r2h+PA/5Y9a88HXgKH4\r\nFB/Kc7scidA2px+BGU5wNKtSsDVgqXeTzZh+DHxkMKS9Bjy/OmKvLTvQCqah\r\ngZDTUOo42ZIsqvRCvV2g33RDcjy8MJ9k5wE0g3l4ZoD+BmnZJYraAeSrPLc+\r\nMUD9tnjRQgU8vYgwPfIKMjrNHLcC+xTXLYc=\r\n=7qcz\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_10.5.0_1660407757416_0.9045434939144923"},"_hasShrinkwrap":false},"10.5.1":{"name":"xdg-portable","version":"10.5.1","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:lab":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-lab.succeeded \"run-s -n rebuild:lab\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","#* cov:send # use `--cov-send=...` to pass options to coverage uploader":"","cov:send":"shx mkdir -p coverage && nyc report --reporter=text-lcov > \"coverage/@coverage.lcov\" && cross-env-shell codecov --disable=gcov --file=\"coverage/@coverage.lcov\" $npm_config_cov_send","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write --list-different","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-p --silent \"_:lint:commits:new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -config .ecrc.JS.json","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --check --loglevel warn","# prerelease # clean, rebuild, and fully test (useful prior to publish/release)":"","prerelease":"run-s clean update verify","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:all":"run-s clean build update","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:lab":"shx rm -fr build/lab && tsc -p tsconfig/tsconfig.lab.json && shx cp -r src/esm-wrapper build/lab/src && shx mkdir -p build/.targets && shx touch build/.targets/build-lab.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# refresh # clean and rebuild/regenerate all project artifacts":"","refresh":"run-s rebuild:all","# refresh:dist # clean, rebuild, and regenerate project distribution":"","refresh:dist":"run-s rebuild update:dist","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code (use `--test-code=...` to pass options to testing harness)":"","test:code":"run-s --silent +:max-node-8 && cross-env-shell ava $npm_config_test_code || ( run-s --silent +:min-node-10 && cross-env-shell nyc --silent ava $npm_config_test_code )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target build/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","# verify # fully (and verbosely) test package":"","verify":"cross-env npm_config_test_dist=true npm_config_test=--verbose run-s test","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:debug:env":"node -e \"console.log({env: process.env})\"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","* _:help # print usage/TARGETs by matching lines containing leading double-quoted text like `# TARGET_NAME # HELP_TEXT`":"","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:#\\s*)(\\w[^#\\x22]*)\\s+#+\\s+([^\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits:all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","* _:lint:commits:new:... * note: review from 'origin/last' or tag just prior to version-sorted latest, with fallback to first commit":"","_:lint:commits:new:commitlint":"node -e \"result=require('child_process').spawnSync('( git tag --list [#v]* --contains origin/last --sort=v:refname || shx true ) && ( git describe --tags --abbrev=0 HEAD~1 || shx true ) && ( git rev-list --max-parents=0 HEAD --abbrev-commit --abbrev=16 || shx true )',{shell:true,encoding:'utf-8'}); o=result.stdout.split(/\\r?\\n/).filter((s)=>!!s); vs=o; v=vs[0]; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from '+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found (within \\'%s..HEAD\\')\\n'+result.stdout+'\\n'+result.stderr, v); process.exit(1);} else { (result.stdout.length > 0) && console.log(result.stdout);};\" || shx true","_:lint:commits:new:spell":"node -e \"result=require('child_process').spawnSync('( git tag --list [#v]* --contains origin/last --sort=v:refname || shx true ) && ( git describe --tags --abbrev=0 HEAD~1 || shx true ) && ( git rev-list --max-parents=0 HEAD --abbrev-commit --abbrev=16 || shx true )',{shell:true,encoding:'utf-8'}); o=result.stdout.split(/\\r?\\n/).filter((s)=>!!s); vs=o; v=vs[0]; result=require('child_process').spawnSync('git log '+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s) (within \\'%s..HEAD\\')\\n'+result.stdout+'\\n'+result.stderr, v); process.exit(1);} else {(result.stdout.length > 0) && console.log(result.stdout);};\" || shx true","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.npm_config_dry_run; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && replace-in-file \"export { _default as default }\" \"export = _default\" dist/types/mod.cjs.d.ts --quiet && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch build/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"run-s clean update && cross-env npm_config_test_dist=true npm run test && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && cross-env npm_config_test_dist=true npm run test","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^7.2.0","fsevents":"*"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","cross-env":"^7.0.3","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"https://cdn.jsdelivr.net/gh/rivy/js-cli.exec-if-updated@2.2.0/dist/pkg/exec-if-updated.tgz","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":">=6.0 <7.0","prettier":"^2.1.1","remark-cli":"=9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","replace-in-file":"=6.3.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"~4.2.0","unified":"^9.2.0"},"optionalDependencies:#":"* 'fsevents' included to avoid `npm ci` errors with early npm versions; ref: <https://github.com/bahmutov/npm-install/issues/103>","optionalDependencies":{"fsevents":"*"},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/lab/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["build/cjs/**","build/esm/**","build/umd/**","dist/**","eg/**","test/**","**/*.test.*","**/*.spec.*"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"e77286c18d3bae9abcfc38772cbca3b651b40ab4","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@10.5.1","_nodeVersion":"12.20.2","_npmVersion":"6.14.11","dist":{"integrity":"sha512-dKX7yn1jgKqh4GENubRidDpDoaRmwwoiEph2JAcDUD6n3/5ROy5rQo42MX8iIl0UCUhVpsoU2jth5DtdvOATvA==","shasum":"17a661ff1c10fecb5316eae281bf7d4dc0775a0b","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-10.5.1.tgz","fileCount":14,"unpackedSize":119740,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC63GFUDl1KuZ1qo7ZDep1grFTAmAkkjneiMcX1qs2X4AIhAM1+OGYyR3V+vUTACu4rmiFZHtbUUybjarlGUKWpp0Yk"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi+CkMACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrK+A/9GeLNbH5mtTkCQSQeloS3MyczxQYTWOJpipUp8ENMi/MGANH6\r\nslmDIA9nVBNg3w9tSolUbBqA/+ssjhDTgYf52ufeRUXCYMaeJP5ObDogYZjj\r\n4MLyNpnHpkCuiLeW5Hefrx41M8Ii3UiqXFOYt1Q0PjrUjwB4U/mOO7RzG8+F\r\nUcS2Rkkc7HUm9hS+YS8+4MoqfKlVjeOM7vhe1ZYO0xlpt0PamMKxd/c95o32\r\n8mjGJMXN4Rii05JwTQq22XRS5JJ69TnoYda2b9X2YtVv8e9fwADiGNEveC+7\r\ntvSCZXLhKoDVFRlUCccNAQZpCnkdCREDjUX2lkMRupQKWmzidVA3N8gVJBq5\r\nVUoDR6HDgKuXNDnfEIK+LkcwyLOd7T2mDyxaKKi0YxyBjApLELB75pqM5sjf\r\nuI+BekNE9SfcFYiYINMm/4f18KeXLHuXi/JAt++Ob/dS/T+RFy1CE1eEDKir\r\n98Ji0INoPBDAno+fV4t51GDCkBZoQX1FZbLoMwyt80oHVZGU4zVTjjzuERKq\r\nGsFB9ma25mLwM5ru7WUjFNzZFy+41iUsj3uFy1VkrJolAbvl4QT1wjKcmGGS\r\nNE4dTTBET8NrwTy2/ob6oC6+EeMNlqdINRUY80JuXn+nX5Gv0jG7NPdXyjfm\r\nkFQUj2hlT+CNIiRp7KO+QEXQ65OwxDhtCSg=\r\n=KewZ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_10.5.1_1660430604387_0.9469085571604159"},"_hasShrinkwrap":false},"10.6.0":{"name":"xdg-portable","version":"10.6.0","description":"Determine XDG Base Directory paths (OS/platform portable)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"packageManager":"yarn@1.22.19","type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:lab":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-lab.succeeded \"run-s -n rebuild:lab\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"shx rm -fr build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html --report-dir=.coverage","#* cov:send # use `--cov-send=...` to pass options to coverage uploader":"","cov:send":"shx mkdir -p .coverage && nyc report --reporter=text-lcov > \".coverage/@coverage.lcov\" && cross-env-shell codecov --disable=gcov --file=\".coverage/@coverage.lcov\" $npm_config_cov_send","cov:text":"nyc report","cov:view":"run-s cov:html && cd .coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write --list-different","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:audit # check for `npm audit` violations in project code":"","lint:audit":"run-s --silent -- npm audit --omit dev","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-p --silent \"_:lint:commits:new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -config .ecrc.JS.json","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --check --loglevel warn","# prerelease # clean, rebuild, and fully test (useful prior to publish/release)":"","prerelease":"run-s clean update verify","# realclean # remove all generated files":"","realclean":"run-s clean && shx rm -fr .coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:all":"run-s clean build update","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:lab":"shx rm -fr build/lab && tsc -p tsconfig/tsconfig.lab.json && shx cp -r src/esm-wrapper build/lab/src && shx mkdir -p build/.targets && shx touch build/.targets/build-lab.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# refresh # clean and rebuild/regenerate all project artifacts":"","refresh":"run-s rebuild:all","# refresh:dist # clean, rebuild, and regenerate project distribution":"","refresh:dist":"run-s rebuild update:dist","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code (use `--test-code=...` to pass options to testing harness)":"","test:code":"run-s --silent +:max-node-8 && cross-env-shell ava $npm_config_test_code || ( run-s --silent +:min-node-10 && cross-env-shell nyc --silent ava $npm_config_test_code )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target build/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","# verify # fully (and verbosely) test package":"","verify":"cross-env npm_config_test_dist=true npm_config_test=--verbose run-s test","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && ( is-ci && run-s cov:send ) || ( run-s --silent _:is-not-ci && run-s cov:view )","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:debug:env":"node -e \"console.log({env: process.env})\"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","* _:help # print usage/TARGETs by matching lines containing leading double-quoted text like `# TARGET_NAME # HELP_TEXT`":"","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%sUsage: \\`\\x1b[2m%s run TARGET\\x1b[m\\` or \\`\\x1b[2mnpx run-s TARGET [TARGET..]\\x1b[m\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:#\\s*)(\\w[^#\\x22]*)\\s+#+\\s+([^\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('\\x1b[0;32m%s\\x1b[m %s', match[1].padEnd(19), match[2]); } }).on('close', () => { /^win/i.test(process.platform) || console.log(); });\"","_:is-not-ci":"is-ci && exit 1 || exit 0","_:lint:commits:all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","* _:lint:commits:new:... * note: review from 'origin/last' or tag just prior to version-sorted latest, with fallback to first commit":"","_:lint:commits:new:commitlint":"node -e \"result=require('child_process').spawnSync('( git tag --list [#v]* --contains origin/last --sort=v:refname || shx true ) && ( git describe --tags --abbrev=0 HEAD~1 || shx true ) && ( git rev-list --max-parents=0 HEAD --abbrev-commit --abbrev=16 || shx true )',{shell:true,encoding:'utf-8'}); o=result.stdout.split(/\\r?\\n/).filter((s)=>!!s); vs=o; v=vs[0]; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from '+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found (within \\'%s..HEAD\\')\\n'+result.stdout+'\\n'+result.stderr, v); process.exit(1);} else { (result.stdout.length > 0) && console.log(result.stdout);};\" || shx true","_:lint:commits:new:spell":"node -e \"result=require('child_process').spawnSync('( git tag --list [#v]* --contains origin/last --sort=v:refname || shx true ) && ( git describe --tags --abbrev=0 HEAD~1 || shx true ) && ( git rev-list --max-parents=0 HEAD --abbrev-commit --abbrev=16 || shx true )',{shell:true,encoding:'utf-8'}); o=result.stdout.split(/\\r?\\n/).filter((s)=>!!s); vs=o; v=vs[0]; result=require('child_process').spawnSync('git log '+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s) (within \\'%s..HEAD\\')\\n'+result.stdout+'\\n'+result.stderr, v); process.exit(1);} else {(result.stdout.length > 0) && console.log(result.stdout);};\" || shx true","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.npm_config_dry_run; name=require('./package.json').name; name=name.replace(/^@/,'').replace('/','-'); result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && replace-in-file \"export { _default as default }\" \"export = _default\" dist/types/mod.cjs.d.ts --quiet && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch build/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {m='fs';require(m).writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"run-s clean update && cross-env npm_config_test_dist=true npm run test && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && cross-env npm_config_test_dist=true npm run test","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"os-paths":"^7.4.0","fsevents":"*"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4","@typescript-eslint/parser":"^4","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","cross-env":"^7.0.3","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7","eslint-config-prettier":"^7","eslint-plugin-eslint-comments":"^3","eslint-plugin-functional":"^3","eslint-plugin-import":"^2","eslint-plugin-security":"^1","eslint-plugin-security-node":"^1","exec-if-updated":"https://cdn.jsdelivr.net/gh/rivy/js-cli.exec-if-updated@2.2.0/dist/pkg/exec-if-updated.tgz","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":">=6.0 <7.0","prettier":"^2.1.1","remark-cli":"=9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","replace-in-file":"=6.3.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"~4.2.0","unified":"^9.2.0"},"optionalDependencies:#":"* 'fsevents' included to avoid `npm ci` errors with early npm versions; ref: <https://github.com/bahmutov/npm-install/issues/103>","optionalDependencies":{"fsevents":"*"},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/lab/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["build/cjs/**","build/esm/**","build/umd/**","dist/**","eg/**","test/**","**/*.test.*","**/*.spec.*"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"21f96aacc6d31a79f3d4dd3fb9083d920948e1d5","bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"homepage":"https://github.com/rivy/js.xdg-portable#readme","_id":"xdg-portable@10.6.0","_nodeVersion":"10.23.1","_npmVersion":"7.24.2","dist":{"integrity":"sha512-xrcqhWDvtZ7WLmt8G4f3hHy37iK7D2idtosRgkeiSPZEPmBShp0VfmRBLWAPC6zLF48APJ21yfea+RfQMF4/Aw==","shasum":"879ef439ace6a95ac5a49eea96c30f6a7819857c","tarball":"https://registry.npmjs.org/xdg-portable/-/xdg-portable-10.6.0.tgz","fileCount":14,"unpackedSize":126772,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEkDGZkYvH7JjPTcCcYxoBZJcdOd0jXVHa3Wwlz0FkGxAiA2n1ODh0wXtELAwDeXxyAwZ7zZMNkySTd9fTO67ZPRnw=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj4YreACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoJ9BAAnuKAF+xj9aOZnAZHO3mvgHrU8LiZfY8UVag3Eka3aPFMCHjv\r\ni7bIxiYKhpUaXJWuXldOm6SnreiEx7zZVeoZ3uVsAb3pvbm7JPtrmu/aWjKF\r\nhM61IKNRnK3pWkaxOS1P5+GG/eyjD5SKJ3CdyxrTS/NXTRbL108vI+T2ehYo\r\noAKkPLxk3/2KXmTaLcFzLR4252xbiKE78BazE2jMqmFWbM2CFnAeb3/PXm6u\r\nJVh2iEI/rl7TK8WxwKfXtTesdflBm5EfGaEk13EA6U62rP1xBZ1MYF3NEBDJ\r\nWDXm4adUB8a/BE8cDIDKzAJNVL1x4OkTCdF1XF8yIXqobAcKNg0hty5Q4zN4\r\n4vLxnEWsEjcXly7ar6lsLyh42KZbdtb9uODMs5WUeqZoWdwvWSeye/VLYlsa\r\nSeT6nsqmRyPo1PRrMRSYT3idV2/oIQ7TzaoF+wefhW1yzhnQ1C3YqINcJMJv\r\nzGjkosV38u89BW2kc2kS1tZPy9JH21MrI8ANEKH5DebTns6Y6A+FHNDx6NCJ\r\nTrwvUEB5iJUJ0NGq7pbXbzH0TiY9VFHrwtWn09DQkwrcgJYP1MF02gzNl+/y\r\n8Qf0OrBMOIKdYCqNVMSKTsGYNoiS3RhwMqNn7uy4vdzPKkfXrzW96xK0s+pw\r\n16gtRECR9gejlRSYTiO9+ya2/WZMcK4uWDY=\r\n=oo0j\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xdg-portable_10.6.0_1675725534247_0.8978945898144786"},"_hasShrinkwrap":false}},"time":{"created":"2019-06-22T23:08:40.409Z","5.0.0":"2019-06-22T23:08:40.542Z","modified":"2023-02-06T23:18:54.516Z","6.0.0":"2019-06-30T04:08:26.822Z","6.0.1":"2019-06-30T04:24:21.793Z","7.0.0":"2019-07-21T03:49:09.633Z","7.0.1":"2019-07-27T22:06:15.354Z","7.0.2":"2019-07-28T22:01:54.574Z","7.0.3":"2019-07-28T22:24:04.219Z","7.1.0":"2019-08-18T20:23:30.050Z","7.2.0":"2019-10-04T19:29:37.652Z","7.2.1":"2019-10-04T20:03:32.369Z","7.2.2":"2020-11-07T00:56:40.608Z","7.3.0":"2020-12-16T04:55:00.578Z","8.0.0":"2021-02-12T20:19:31.137Z","8.0.1":"2021-02-12T20:45:33.346Z","8.1.0":"2021-02-14T14:52:07.153Z","9.0.0":"2021-02-14T17:38:12.200Z","9.1.0":"2021-02-14T23:21:04.345Z","9.2.0":"2021-02-21T20:43:55.744Z","9.3.0":"2021-02-22T04:44:07.463Z","9.4.0":"2021-02-27T20:05:07.426Z","10.0.0":"2022-08-05T11:36:55.049Z","10.1.0":"2022-08-06T19:26:52.803Z","10.2.0":"2022-08-06T21:46:03.829Z","10.3.0":"2022-08-09T22:32:14.267Z","10.4.0":"2022-08-11T03:27:27.877Z","10.5.0":"2022-08-13T16:22:37.660Z","10.5.1":"2022-08-13T22:43:24.544Z","10.6.0":"2023-02-06T23:18:54.431Z"},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"description":"Determine XDG Base Directory paths (OS/platform portable)","homepage":"https://github.com/rivy/js.xdg-portable#readme","keywords":["base","cache","common","config","cross-platform","data","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","runtime","state","unix","windows","xdg"],"repository":{"type":"git","url":"git+https://github.com/rivy/js.xdg-portable.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"bugs":{"url":"https://github.com/rivy/js.xdg-portable/issues"},"license":"MIT","readme":"<!-- dprint-ignore-file -->\n<!-- deno-fmt-ignore-start -->\n\n<!-- @prettier -->\n<!DOCTYPE markdown><!-- markdownlint-disable first-line-heading no-inline-html -->\n<meta charset=\"utf-8\" content=\"text/markdown\" lang=\"en\">\n<!-- -## editors ## (emacs/sublime) -*- coding: utf8-nix; tab-width: 4; mode: markdown; indent-tabs-mode: nil; basic-offset: 2; st-word_wrap: 'true' -*- ## (jEdit) :tabSize=4:indentSize=4:mode=markdown: ## (notepad++) vim:tabstop=4:syntax=markdown:expandtab:smarttab:softtabstop=2 ## modeline (see <https://archive.is/djTUD>@@<http://webcitation.org/66W3EhCAP> ) -->\n<!-- spell-checker:ignore expandtab markdownlint modeline smarttab softtabstop -->\n\n<!-- markdownlint-disable heading-increment no-duplicate-heading -->\n<!-- spell-checker:ignore (abbrev/names) ArchLinux CICD Codacy Deno DPrint JSDelivr NodeJS npmJS uutils -->\n<!-- spell-checker:ignore (jargon) readonly subdir tmpdir -->\n<!-- spell-checker:ignore (platform/windows) APPDATA LOCALAPPDATA -->\n<!-- spell-checker:ignore (targets) realclean -->\n<!-- spell-checker:ignore (people) Roy Ivy III * rivy ; Sindre Sorhus * sindresorhus -->\n\n# [xdg-portable](https://github.com/rivy/js.xdg-portable)\n\n> Determine [XDG Base Directory](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html) paths (OS/platform portable)\n\n[![Build status (GHA)][gha-image]][gha-url]\n[![Build status (AppVeyor)][appveyor-image]][appveyor-url]\n[![Coverage status][coverage-image]][coverage-url]\n[![License][license-image]][license-url]\n[![Style Guide][style-image]][style-url]\n&nbsp; <br/>\n[![Repository][repository-image]][repository-url]\n[![Deno version][deno-image]][deno-url]\n[![NPM version][npm-image]][npm-url]\n[![NodeJS version][nodejsv-image]][repository-url]\n[![npmJS Downloads][downloads-image]][downloads-url]\n[![JSDelivr Downloads][jsdelivr-image]][jsdelivr-url]\n\n<!--\nXDG references\n# ref: <https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html> @@ <https://archive.is/aAhtw>\n# ref: <https://specifications.freedesktop.org/basedir-spec/latest/ar01s03.html> @@ <https://archive.is/7N0TN>\n# ref: <https://wiki.archlinux.org/index.php/XDG_Base_Directory> @@ <https://archive.is/VdO9n>\n# ref: <https://wiki.debian.org/XDGBaseDirectorySpecification#state> @@ <http://archive.is/pahId>\n# ref: <https://ploum.net/207-modify-your-application-to-use-xdg-folders> @@ <https://archive.is/f43Gk>\n-->\n\n## Installation (CJS/ESM/TypeScript)\n\n<!-- ref: [JSDelivr ~ GitHub](https://www.jsdelivr.com/documentation#id-github) @@ <https://archive.is/c8s9Y> -->\n\n```shell\nnpm install xdg-portable\n# or... `npm install \"git:github.com/rivy/js.xdg-portable\"`\n# or... `npm install \"git:github.com/rivy/js.xdg-portable#v10.6.0\"`\n# or... `npm install \"https://cdn.jsdelivr.net/gh/rivy/js.xdg-portable@v10.6.0/dist/xdg-portable.tgz\"`\n# or... `npm install \"https://cdn.jsdelivr.net/gh/rivy/js.xdg-portable@COMMIT_SHA/dist/xdg-portable.tgz\"`\n```\n\n## Usage\n\n#### CommonJS (CJS)\n\n```js\nconst xdg = require('xdg-portable/cjs');\n\nconst configDirs = xdg.configDirs();\nconst stateDir = xdg.state();\n\nconst locatePath = require('locatePath');\nconst mkdirp = require('mkdirp');\n\nconst configDir = locatePath.sync(configDirs) || configDirs[0];\nmkdirp.sync(configDir, 0o700);\n\nmkdirp.sync(stateDir, 0o700);\n```\n\n#### ECMAScript (ESM)/TypeScript\n\n```js\nimport xdg from 'xdg-portable';\nconst configDirs = xdg.configDirs();\n//...\n```\n\n#### Deno\n\n<!-- ref: [JSDelivr ~ GitHub](https://www.jsdelivr.com/documentation#id-github) @@ <https://archive.is/c8s9Y> -->\n\n```ts\nimport xdg from 'https://deno.land/x/xdg_portable@v10.6.0/src/mod.deno.ts';\n//or (via CDN, [ie, JSDelivr with GitHub version/version-range, commit, 'latest' support])...\n//import xdg from 'https://cdn.jsdelivr.net/gh/rivy/js.xdg-portable@v10.6.0/src/mod.deno.ts';\n//import xdg from 'https://cdn.jsdelivr.net/gh/rivy/js.xdg-portable@COMMIT_SHA/src/mod.deno.ts';\nconst configDirs = xdg.configDirs();\n//...\n```\n\n## API\n\n### Construction/Initialization\n\n#### `XDG()`\n\n```js\nconst xdg = require('xdg-portable/cjs'); // CJS\n//or...\n//import xdg from 'xdg-portable'; // ESM/TypeScript\n//import xdg from 'https://deno.land/x/xdg/src/mod.deno.ts'; // Deno\n```\n\nWhen importing this module, the object returned is a function object, `XDG`, augmented with attached methods. Additional `XDG` objects may be constructed by direct call of the imported `XDG` object (eg, `const x = xdg()`) or by using `new` (eg, `const x = new xdg()`). Notably, since the `XDG` object contains no user-facing instance state, all `XDG` objects will be functionally identical.\n\n### Types\n\n- `XDG` ~ primary module function object\n\nTypes named here are exported individually by name (eg, as \"XDG\").\n\n```js\nimport type { XDG } from 'xdg-portable'; // TypeScript\n//or...\n//import type { XDG } from 'https://deno.land/x/xdg/src/mod.deno.ts'; // Deno\n```\n\n### Methods\n\nAll module methods return platform-compatible path strings which are normalized and have no trailing path separators.\n\nThe returned path strings are _not_ guaranteed to already exist on the file system. So, the user application is responsible for directory construction, if/when needed. If needed, [`make-dir`](https://www.npmjs.com/package/make-dir) or [`mkdirp`](https://www.npmjs.com/package/mkdirp) can be used to create the directories.\n\n#### `xdg.cache(): string`\n\n- Returns the directory path for user-specific non-essential (ie, cached) data files.\n\n> Deletion of the data contained here might cause an application to slow down.\n\n```js\nconst cacheDir = xdg.cache();\n//(mac)=> '/Users/rivy/Library/Caches'\n//(nix)=> '/home/rivy/.cache'\n//(win)=> 'C:\\\\Users\\\\rivy\\\\AppData\\\\Local\\\\xdg.cache'\n```\n\nThis directory location would be analogous to _/var/cache_ for \\*nix.\n\n`%LocalAppData%\\xdg.cache` is the default for the windows platform.\n\n#### `xdg.config(): string`\n\n- Returns the directory path for user-specific configuration files.\n\n> Deletion of the data contained here might require the user to reconfigure an application.\n\n```js\nconst configDir = xdg.config();\n//(mac)=> '/Users/rivy/Library/Preferences'\n//(nix)=> '/home/rivy/.config'\n//(win)=> 'C:\\\\Users\\\\rivy\\\\AppData\\\\Roaming\\\\xdg.config'\n```\n\nThis directory location would be analogous to _/etc_ for \\*nix.\n\n`%AppData%\\xdg.config` is the default for the windows platform.\n\n#### `xdg.data(): string`\n\n- Returns directory path for user-specific data files.\n\n> Deletion of the data contained here might force the user to restore from backups.\n\n```js\nconst dataDir = xdg.data();\n//(mac)=> '/Users/rivy/Library/Application Support'\n//(nix)=> '/home/rivy/.local/share'\n//(win)=> 'C:\\\\Users\\\\rivy\\\\AppData\\\\Roaming\\\\xdg.data'\n```\n\nThis directory location would be analogous to _/usr/share_ for \\*nix.\n\n`%AppData%\\xdg.data` is the default for the windows platform.\n\n#### `xdg.runtime(): string?`\n\n- Returns the directory path for user-specific non-essential runtime files (such as sockets, named pipes, etc); may be `undefined`.\n\n> Deletion of the data contained here might interfere with a currently executing application but should have no effect on future executions.\n\n```js\nconst runtimeDir = xdg.runtime();\n```\n\nThe XDG specification defines some fairly strict specifications for a \"runtime\"-data candidate directory. To meet these criteria, the directory must usually be supplied by the OS. The user may override this by using the `XDG_RUNTIME_DIR` environment variable.\n\n`undefined` is the default for the windows platform.\n\n- ref: [archlinux ~ XDG Base Directory](https://wiki.archlinux.org/index.php/XDG_Base_Directory#User_directories)<small><sup>&shy;[`@`](https://archive.is/VdO9n#3.9%)</sup></small>\n\n#### `xdg.state(): string`\n\n- Returns the directory path for user-specific state files (non-essential and more volatile than configuration files).\n\n> Deletion of the data contained here should not materially interfere with execution of an application.\n\n```js\nconst stateDir = xdg.state();\n//(mac)=> '/Users/rivy/Library/State'\n//(nix)=> '/home/rivy/.local/state'\n//(win)=> 'C:\\\\Users\\\\rivy\\\\AppData\\\\Local\\\\xdg.state'\n```\n\nThis directory location might hold data such as backups, input history, logs, recent file lists, visual application state, etc.\n\n`%LocalAppData%\\xdg.state` is the default for the windows platform.\n\n#### `xdg.configDirs(): readonly string[]`\n\n- Returns a preference-ordered array of base directory paths to search for configuration files (includes `xdg.config()` directory as first entry).\n\n```js\nconst configDirs = xdg.configDirs();\n//(mac)=> [ '/Users/rivy/Library/Preferences', ... ]\n//(nix)=> [ '/home/rivy/.config', ... ]\n//(win)=> [ 'C:\\\\Users\\\\rivy\\\\AppData\\\\Roaming\\\\xdg.config' , ... ]\n```\n\n#### `xdg.dataDirs(): readonly string[]`\n\n- Returns a preference-ordered array of base directory paths to search for data files (includes `xdg.data()` directory as first entry).\n\n```js\nconst dataDirs = xdg.dataDirs();\n//(mac)=> [ '/Users/rivy/Library/Application Support', ... ]\n//(nix)=> [ '/home/rivy/.local/share', ... ]\n//(win)=> [ 'C:\\\\Users\\\\rivy\\\\AppData\\\\Roaming\\\\xdg.share' , ... ]\n```\n\n## Supported Platforms\n\n### NodeJS\n\n> #### Requirements\n>\n> NodeJS >= 4.0[^*]\n\n<!--{blockquote: .--info style=\"font-size:75%;\"}-->\n\n[^*]: With the conversion to a TypeScript-based project, due to tooling constraints, building and testing are more difficult and more limited on Node platforms earlier than NodeJS-v10. However, the generated CommonJS/UMD project code is fully tested (for NodeJS-v10+) and continues to be compatible with NodeJS-v4+.\n\n#### CommonJS modules (CJS; `*.js` and `*.cjs`)\n\nCJS is the basic supported output (with support for NodeJS versions as early as NodeJS-v4).\n\n```js\nconst xdg = require('xdg-portable/cjs');\nconsole.log(xdg.config());\n```\n\n> Note: for CJS, `require('xdg-portable')` is supported for backward-compatibility and will execute correctly at run-time. However, `require('xdg-portable')` links to the default package type declarations which, though _correct_ for Deno/ESM/TypeScript, are _incorrect_ for CJS. This, then, leads to incorrect analysis of CJS files by static analysis tools such as TypeScript and Intellisense.\n>\n> Using `require('xdg-portable/cjs')` is preferred as it associates the proper CJS type declarations and provides correct information to static analysis tools.\n\n#### ECMAScript modules (ESM; `*.mjs`)\n\n- <small><span title=\"ESM support added in v8.0\">Requires `XDG` `v8.0`+.</span></small>\n\n`XDG` fully supports ESM imports.\n\n```js\nimport xdg from 'xdg-portable';\nconsole.log(xdg.config());\n```\n\n### TypeScript (`*.ts`)\n\n- <small><span title=\"TypeScript support added in v8.0\">Requires `XDG` `v8.0`+.</span></small>\n\nAs of `v8.0`+, `XDG` has been converted to a TypeScript-based module.\nAs a consequence, TypeScript type definitions are automatically generated, bundled, and exported by the module.\n\n### Deno\n\n> #### Requirements\n>\n> Deno >= v1.8.0[^deno-version-req]\n\n<!--{blockquote: .--info style=\"font-size:75%;\"}-->\n\n[^deno-version-req]: The `Deno.permissions` API (stabilized in Deno v1.8.0) is required to avoid needless panics or prompts by Deno during static imports of this module/package. Note: Deno v1.3.0+ may be used if the run flag `--unstable` is also used.\n\n> #### Required Permissions\n>\n> - `--allow-env` &middot; _allow access to the process environment variables_<br>\n>   This module/package requires access to various environment variables to determine platform configuration (eg, location of temp and user directories).\n\n<!--{blockquote: .--info style=\"font-size:75%;\"}-->\n\n- <small><span title=\"Deno support added in v9.0\">Requires `XDG` `v9.0`+.</span></small>\n\n`XDG` also fully supports use by Deno.\n\n```js deno\nimport xdg from 'https://deno.land/x/xdg/src/mod.deno.ts';\nconsole.log(xdg.config());\n```\n\n## Discussion\n\nThe [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html)<small><sup>&shy;[@](https://archive.is/J0mTC)</sup></small> defines categories of user information (ie, \"cache\", \"config\", \"data\", ...), defines their standard storage locations, and defines the standard process for user configuration of those locations (using `XDG_CACHE_HOME`, etc).\n\nApplications supporting the XDG convention are expected to store user-specific files within these locations, either within the common/shared directory (eg, `` `${xdg.cache()}/filename` ``) or within a more isolated application-defined subdirectory (eg, `` `${xdg.config()}/DIR/filename` ``; `DIR` usually being the application name).\n\n### Windows (\"win32\") specific notes\n\nWindows has an alternate convention, offering just two standard locations for applications to persist data, either `%APPDATA%` (for files which may \"roam\" with the user between hosts) and `%LOCALAPPDATA%` (for local-machine-only files). All application files are expected to be stored within an application-unique subdirectory in one of those two locations, usually under a directory matching the application name. There is no further popular convention used to segregate the file types (ie, into \"cache\", \"config\", ...) in any way similar to the XDG specification.\n\nSo, to support basic XDG-like behavior (that is, segregating the information types into type-specific directories), this module creates a new convention for Windows hosts, placing the specific types of files into subdirectories under either `%APPDATA%` or `%LOCALAPPDATA%`, as appropriate for the file type. For example, \"cache\"-type files will be offered placement into `%LOCALAPPDATA%\\xdg.cache`, \"config\"-type files into `%APPDATA%\\xdg.config`, \"data\"-type files into `%APPDATA%\\xdg.data`, etc.\n\n[`xdg-app-paths`](https://www.npmjs.com/package/xdg-app-paths) builds on this module and offers application specific paths more in-line with usual platform conventions, but still compatible with the XDG specification.\n\n### Fallback to temporary directory\n\nIn the uncommon case that both the XDG environment variable is not set and the users home directory can't be determined, the temporary directory (OS/platform specific; determined by `temp()` from [os-paths](https://www.npmjs.com/package/os-paths)) will be used as a fallback for the missing home directory value.\n\n### Origins\n\nThis module was forked from [sindresorhus/xdg-basedir](https://github.com/sindresorhus/xdg-basedir) in order to add cross-platform portability and support simpler cross-platform applications.\n\n- ref: <https://github.com/sindresorhus/xdg-basedir/pull/4>\n\n## Building and Contributing\n\n[![Repository][repository-image]][repository-url]\n[![Build status (GHA)][gha-image]][gha-url]\n[![Build status (AppVeyor)][appveyor-image]][appveyor-url]\n[![Coverage status][coverage-image]][coverage-url]\n&nbsp; <br/>\n[![Quality status (Codacy)][codacy-image]][codacy-url]\n[![Quality status (CodeClimate)][codeclimate-image]][codeclimate-url]\n[![Quality status (CodeFactor)][codefactor-image]][codefactor-url]\n\n### Build requirements\n\n- NodeJS >= 10.14\n- a JavaScript package/project manager ([`npm`](https://www.npmjs.com/get-npm) or [`yarn`](https://yarnpkg.com))\n- [`git`](https://git-scm.com)\n\n> #### optional\n>\n> - [`bmp`](https://deno.land/x/bmp@v0.0.6) (v0.0.6+) ... synchronizes version strings within the project\n> - [`git-changelog`](https://github.com/rivy-go/git-changelog) (v1.1+) ... enables changelog automation\n\n### Quick build/test\n\n```shell\nnpm install-test\n```\n\n### Contributions/development\n\n#### _Reproducible_ setup (for CI or local development)\n\n```shell\ngit clone \"https://github.com/rivy/js.xdg-portable\"\ncd js.xdg-portable\n# * note: for WinOS, replace `cp` with `copy` (or use [uutils](https://github.com/uutils/coreutils))\n# npm\ncp .deps-lock/package-lock.json .\nnpm clean-install\n# yarn\ncp .deps-lock/yarn.lock .\nyarn --immutable --immutable-cache --check-cache\n```\n\n#### Project development scripts\n\n```shell\n> npm run help\n...\nusage: `npm run TARGET` or `npx run-s TARGET [TARGET..]`\n\nTARGETs:\n\nbuild               build/compile package\nclean               remove build artifacts\ncoverage            calculate and display (or send) code coverage [alias: 'cov']\nfix                 fix package issues (automated/non-interactive)\nfix:lint            fix ESLint issues\nfix:style           fix Prettier formatting issues\nhelp                display help\nlint                check for package code 'lint'\nlint:audit          check for `npm audit` violations in project code\nlint:commits        check for commit flaws (using `commitlint` and `cspell`)\nlint:editorconfig   check for EditorConfig format flaws (using `editorconfig-checker`)\nlint:lint           check for code 'lint' (using `eslint`)\nlint:markdown       check for markdown errors (using `remark`)\nlint:spell          check for spelling errors (using `cspell`)\nlint:style          check for format imperfections (using `prettier`)\nprerelease          clean, rebuild, and fully test (useful prior to publish/release)\nrealclean           remove all generated files\nrebuild             clean and (re-)build project\nrefresh             clean and rebuild/regenerate all project artifacts\nrefresh:dist        clean, rebuild, and regenerate project distribution\nretest              clean and (re-)test project\nreset:hard          remove *all* generated files and reinstall dependencies\nshow:deps           show package dependencies\ntest                test package\ntest:code           test package code (use `--test-code=...` to pass options to testing harness)\ntest:types          test for type declaration errors (using `tsd`)\nupdate              update/prepare for distribution [alias: 'dist']\nupdate:changelog    update CHANGELOG (using `git changelog ...`)\nupdate:dist         update distribution content\nverify              fully (and verbosely) test package\n```\n\n#### Packaging & Publishing\n\n##### Package\n\n```shell\n#=== * POSIX\n# update project VERSION strings (package.json,...)\n# * `bmp --[major|minor|patch]`; next VERSION in M.m.r (semver) format\nbmp --minor\nVERSION=$(cat VERSION)\ngit-changelog --next-tag \"v${VERSION}\" > CHANGELOG.mkd\n# create/commit updates and distribution\ngit add package.json CHANGELOG.mkd README.md VERSION .bmp.yml\ngit commit -m \"${VERSION}\"\nnpm run clean && npm run update:dist && git add dist && git commit --amend --no-edit\n# (optional) update/save dependency locks\n# * note: `yarn import` of 'package-lock.json' (when available) is faster but may not work for later versions of 'package-lock.json'\nrm -f package-lock.json yarn.lock\nnpm install --package-lock\nyarn install\nmkdir .deps-lock 2> /dev/null\ncp package-lock.json .deps-lock/\ncp yarn.lock .deps-lock/\ngit add .deps-lock\ngit commit --amend --no-edit\n# tag VERSION commit\ngit tag -f \"v${VERSION}\"\n# (optional) prerelease checkup\nnpm run prerelease\n#=== * WinOS\n@rem # update project VERSION strings (package.json,...)\n@rem # * `bmp --[major|minor|patch]`; next VERSION in M.m.r (semver) format\nbmp --minor\nfor /f %G in (VERSION) do @set \"VERSION=%G\"\ngit-changelog --next-tag \"v%VERSION%\" > CHANGELOG.mkd\n@rem # create/commit updates and distribution\ngit add package.json CHANGELOG.mkd README.md VERSION .bmp.yml\ngit commit -m \"%VERSION%\"\nnpm run clean && npm run update:dist && git add dist && git commit --amend --no-edit\n@rem # (optional) update/save dependency locks\n@rem # * note: `yarn import` of 'package-lock.json' (when available) is faster but may not work for later versions of 'package-lock.json'\ndel package-lock.json yarn.lock 2>NUL\nnpm install --package-lock\nyarn install\nmkdir .deps-lock 2>NUL\ncopy /y package-lock.json .deps-lock >NUL\ncopy /y yarn.lock .deps-lock >NUL\ngit add .deps-lock\ngit commit --amend --no-edit\n@rem # tag VERSION commit\ngit tag -f \"v%VERSION%\"\n@rem # (optional) prerelease checkup\nnpm run prerelease\n```\n\n##### Publish\n\n```shell\n# publish\n# * optional (will be done in 'prePublishOnly' by `npm publish`)\nnpm run clean && npm run test && npm run dist && git-changelog > CHANGELOG.mkd #expect exit code == 0\ngit diff-index --quiet HEAD || echo \"[lint] ERROR uncommitted changes\" # expect no output and exit code == 0\n# *\nnpm publish # `npm publish --dry-run` will perform all prepublication actions and stop just before the actual publish push\n# * if published to NPMjs with no ERRORs; push to deno.land with tag push\ngit push origin --tags\n```\n\n### Contributions\n\nContributions are welcome.\n\nAny pull requests should be based off of the default branch (`master`). And, whenever possible, please include tests for any new code, ensuring that local (via `npm test`) and remote CI testing passes.\n\nBy contributing to the project, you are agreeing to provide your contributions under the same [license](./LICENSE) as the project itself.\n\n## Related\n\n- [`os-paths`](https://www.npmjs.com/package/os-paths) ... portable common OS/platform paths (home, temp, ...)\n- [`xdg-app-paths`](https://www.npmjs.com/package/xdg-app-paths) ... easy XDG for applications\n- [`xdg-basedir`](https://www.npmjs.com/package/xdg-basedir) ... inspiration for this module\n\n## License\n\n[MIT](./LICENSE) © [Roy Ivy III](https://github.com/rivy)\n\n<!-- badge references -->\n\n<!-- Repository -->\n<!-- Note: for '[repository-image] ...', `%E2%81%A3` == utf-8 sequence of \"Unicode Character 'INVISIBLE SEPARATOR' (U+2063)\"; ref: <https://codepoints.net/U+2063> -->\n\n[repository-image]: https://img.shields.io/github/v/tag/rivy/js.xdg-portable?sort=semver&label=%E2%81%A3&logo=github&logoColor=white\n[repository-url]: https://github.com/rivy/js.xdg-portable\n[license-image]: https://img.shields.io/npm/l/xdg-portable.svg?color=tomato&style=flat\n[license-url]: license\n[nodejsv-image]: https://img.shields.io/node/v/xdg-portable?color=slateblue\n[style-image]: https://img.shields.io/badge/code_style-prettier-mediumvioletred.svg\n[style-url]: https://prettier.io\n\n<!-- Continuous integration/deployment (CICD) -->\n\n[appveyor-image]: https://img.shields.io/appveyor/ci/rivy/js-xdg-portable/master.svg?style=flat&logo=AppVeyor&logoColor=deepskyblue\n[appveyor-url]: https://ci.appveyor.com/project/rivy/js-xdg-portable\n[gha-image]: https://img.shields.io/github/actions/workflow/status/rivy/js.xdg-portable/CI.yml?branch=master&label=CI&logo=github\n[gha-url]: https://github.com/rivy/js.xdg-portable/actions?query=workflow%3ACI\n\n<!-- Code quality -->\n\n[coverage-image]: https://img.shields.io/codecov/c/github/rivy/js.xdg-portable/master.svg\n[coverage-url]: https://codecov.io/gh/rivy/js.xdg-portable\n[codeclimate-url]: https://codeclimate.com/github/rivy/js.xdg-portable\n[codeclimate-image]: https://img.shields.io/codeclimate/maintainability/rivy/js.xdg-portable?label=codeclimate\n[codacy-image]: https://img.shields.io/codacy/grade/06ce379ca8cb437db6c79f6eeca7f2f9?label=codacy\n[codacy-url]: https://app.codacy.com/gh/rivy/js.xdg-portable/dashboard\n[codefactor-image]: https://img.shields.io/codefactor/grade/github/rivy/js.xdg-portable?label=codefactor\n[codefactor-url]: https://www.codefactor.io/repository/github/rivy/js.xdg-portable\n\n<!-- Distributors/Registries -->\n\n[deno-image]: https://img.shields.io/github/package-json/v/rivy/js.xdg-portable/master?label=deno\n[deno-url]: https://deno.land/x/xdg\n[downloads-image]: http://img.shields.io/npm/dm/xdg-portable.svg?style=flat\n[downloads-url]: https://npmjs.org/package/xdg-portable\n[jsdelivr-image]: https://img.shields.io/jsdelivr/gh/hm/rivy/js.xdg-portable?style=flat\n[jsdelivr-url]: https://www.jsdelivr.com/package/gh/rivy/js.xdg-portable\n[npm-image]: https://img.shields.io/npm/v/xdg-portable.svg?style=flat\n[npm-url]: https://npmjs.org/package/xdg-portable\n\n<!-- Alternate/Old image/URL links -->\n\n<!-- [appveyor-image]: https://ci.appveyor.com/api/projects/status/.../branch/master?svg=true -->\n<!-- [coverage-image]: https://img.shields.io/coveralls/github/rivy/xdg-portable/master.svg -->\n<!-- [coverage-url]: https://coveralls.io/github/rivy/xdg-portable -->\n<!-- [npm-image]: https://img.shields.io/npm/v/xdg-portable.svg?style=flat&label=npm&logo=NPM&logoColor=linen -->\n<!-- [repository-image]:https://img.shields.io/badge/%E2%9D%A4-darkcyan?style=flat&logo=github -->\n<!-- [style-image]: https://img.shields.io/badge/code_style-standard-darkcyan.svg -->\n<!-- [style-url]: https://standardjs.com -->\n<!-- [travis-image]: https://img.shields.io/travis/rivy/js.xdg-portable/master.svg?style=flat&logo=Travis-CI&logoColor=silver -->\n<!-- [travis-image]: https://travis-ci.org/rivy/js.xdg-portable.svg?branch=master -->\n<!-- [travis-image]: https://img.shields.io/travis/rivy/js.xdg-portable/master.svg?style=flat&logo=travis -->\n<!-- [travis-url]: https://travis-ci.org/rivy/js.xdg-portable -->\n","readmeFilename":"README.md"}